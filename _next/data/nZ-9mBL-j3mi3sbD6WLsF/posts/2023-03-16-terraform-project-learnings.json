{"pageProps":{"post":{"slug":"2023-03-16-terraform-project-learnings","markdownBody":"\r\nI just finished my first ever infrastructure project for a client. My Terraform skills are good enough to be dangerous, but during the development of this project I learned a lot that I would do differently next time.\r\n\r\n## Project structure\r\n\r\nHaving worked with semi-professional Terraform code before, I applied what I knew to my new project. That was mainly that we have a shared base and an overlay directory for each environment. I went with a single Terraform module for the shared infrastructure, and variables for each environment. Naively, roughly every service had their own file.\r\n\r\n```\r\n.\r\n├── modules\r\n│   └── infrastructure\r\n│       ├── alb.tf\r\n│       ├── cache.tf\r\n│       ├── database.tf\r\n│       ├── dns.tf\r\n│       ├── ecr.tf\r\n│       ├── ecs.tf\r\n│       ├── iam.tf\r\n│       ├── logs.tf\r\n│       ├── main.tf\r\n│       ├── network.tf\r\n│       ├── secrets.tf\r\n│       ├── security.tf\r\n│       ├── ssl.tf\r\n│       ├── state.tf\r\n│       └── variables.tf\r\n├── production\r\n│   ├── main.tf\r\n│   └── secrets.tf\r\n└── staging\r\n    ├── main.tf\r\n    └── secrets.tf\r\n```\r\n\r\nThis works very well, but I already started running into issues extending this setup. For my next project, I would probably find individual components and turn them into smaller reusable submodules. If I were to rewrite the project above, I would probably structure it like this (not a complete project, but I think you get the idea):\r\n\r\n```\r\n.\r\n├── modules\r\n│   └── infrastructure\r\n│       ├── main.tf\r\n│       ├── modules\r\n│       │   ├── database\r\n│       │   │   ├── iam.tf\r\n│       │   │   ├── logs.tf\r\n│       │   │   ├── main.tf\r\n│       │   │   ├── outputs.tf\r\n│       │   │   ├── rds.tf\r\n│       │   │   └── variables.tf\r\n│       │   ├── loadbalancer\r\n│       │   │   ├── alb.tf\r\n│       │   │   ├── logs.tf\r\n│       │   │   ├── main.tf\r\n│       │   │   ├── outputs.tf\r\n│       │   │   └── variables.tf\r\n│       │   ├── network\r\n│       │   │   ├── dns.tf\r\n│       │   │   ├── logs.tf\r\n│       │   │   ├── main.tf\r\n│       │   │   ├── outputs.tf\r\n│       │   │   ├── ssl.tf\r\n│       │   │   ├── variables.tf\r\n│       │   │   └── vpc.tf\r\n│       │   ├── service\r\n│       │   │   ├── ecr.tf\r\n│       │   │   ├── ecs.tf\r\n│       │   │   ├── iam.tf\r\n│       │   │   ├── logs.tf\r\n│       │   │   ├── main.tf\r\n│       │   │   ├── outputs.tf\r\n│       │   │   └── variables.tf\r\n│       │   └── state\r\n│       │       ├── locks.tf\r\n│       │       ├── main.tf\r\n│       │       ├── outputs.tf\r\n│       │       ├── s3.tf\r\n│       │       └── variables.tf\r\n│       ├── main.tf\r\n│       ├── outputs.tf\r\n│       └── variables.tf\r\n├── production\r\n│   ├── main.tf\r\n│   └── secrets.tf\r\n└── staging\r\n    ├── main.tf\r\n    └── secrets.tf\r\n```\r\n\r\n## Secrets\r\n\r\nI decided to use [git-crypt](https://github.com/AGWA/git-crypt) to manage secrets, but that was only before I learned about [SOPS](https://github.com/mozilla/sops). It's too late to migrate now, but if I could, I would choose SOPS for secrets any day of the week for upcoming projects. It even has a [Terraform provider](https://registry.terraform.io/providers/carlpett/sops/latest/docs), so there's no excuse not to use it. ;)\r\n\r\n## Conclusion\r\n\r\nOverall I'm pretty happy with how the project turned out, but there are some things that I learned during this project that will pay off later.\r\n\r\n---\r\n\r\nThis is post 057 of [#100DaysToOffload](https://100daystooffload.com/).\r\n","frontmatter":{"title":"Terraform project learnings","date":"2023-03-16","tags":"100DaysToOffload, infrastructure, aws, note, terraform, learnings, tech"},"tags":["100DaysToOffload","infrastructure","aws","note","terraform","learnings","tech"]},"recommendedPosts":[{"slug":"2025-09-15-making-family-it-support-effortless-and-free","frontmatter":{"title":"Making family IT support effortless (and free)","date":"2025-09-15","tags":"note, life, tech"},"tags":["note","life","tech"]},{"slug":"2025-06-11-git-diff-ignore-all-space-makes-code-reviews-way-easier","frontmatter":{"title":"git diff --ignore-all-space makes code review way easier","date":"2025-06-11","tags":"guide, note, til, git, tech, programming"},"tags":["guide","note","til","git","tech","programming"]},{"slug":"2025-05-20-no-matter-what-you-do-always-leave-a-breadcrumb","frontmatter":{"title":"No matter what you do, always leave a breadcrumb","date":"2025-05-20","tags":"note, practices, writing, life, tech"},"tags":["note","practices","writing","life","tech"]},{"slug":"2025-03-25-container-interfaces","frontmatter":{"title":"About Container Interfaces","date":"2025-03-25","tags":"infrastructure, note, tech"},"tags":["infrastructure","note","tech"]},{"slug":"2025-02-27-a-trick-to-manage-frequently-used-prompts-in-claude-chatgpt","frontmatter":{"title":"A trick to manage frequently used prompts in Claude/ChatGPT","date":"2025-02-27","tags":"guide, note, tech, llm, ai"},"tags":["guide","note","tech","llm","ai"]}]},"__N_SSG":true}