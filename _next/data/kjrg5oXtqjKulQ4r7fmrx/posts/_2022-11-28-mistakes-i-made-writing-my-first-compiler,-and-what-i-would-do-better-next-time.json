{"pageProps":{"post":{"slug":"_2022-11-28-mistakes-i-made-writing-my-first-compiler,-and-what-i-would-do-better-next-time","markdownBody":"\nMy most ambitious side project so far has been the [Antimony Programming\nLanguage](https://github.com/antimony-lang/antimony). It's a compiler for a\nprogramming language I made up about two years ago. It can be used for basic\nprograms and algorithms, but anything beyond\n[bubblesort](https://github.com/antimony-lang/antimony/blob/master/examples/bubblesort.sb)\nand the [ackermann\nfunction](https://github.com/antimony-lang/antimony/blob/master/examples/ackermann.sb)\nwasn't feasible.\n\nUnfortunately, the language never grew out of the \"toy\" phase, so I more or less\nabandoned it. Looking back, I definitely learned a lot about compilers, and if I\nwere to write another language (which I will most likely do in the future),\nthere are some things that I would do better next time.\n\n## Statements are expressions minus flexibility\n\nThe syntax of many C-like programming languages can be broken up into two\ncategories. An `Expression` is anything that resolves a value.\n\n```c\n1 + 2       // 3\n5 * 8 + 2   // 42\n1 < 2       // true\naddOne(1)   // 2 (assuming `addOne` returns the given value plus one)\n[1, 2, 3]   // Array containing a 1, a 2 and a 3\n```\n\nA `Statement` resembles an action or branch in a program.\n\n```c\nint foo() {                 // Declare statement\n    int bar = 1;            // Assignment statement\n    if (bar >= 1) {         // Conditional statement\n        printf(\"%d\", bar);  // Function call expressions can be statements too!\n    }\n}\n```\n\nAntimony picks up on this concept, and strictly separates statements from\nexpressions. Some modern programming languages (E.g.\n[Rust](https://rust-lang.org/)) got rid of most types of statements by just\ndeclaring almost anything an expression. There are just [Declaration\nStatements](https://doc.rust-lang.org/reference/statements.html#declaration-statements)\nused for function and variable declaration, and [Expression\nStatements](https://doc.rust-lang.org/reference/statements.html#expression-statements),\nwhich can contain any arbitrary expression. This allows us to introduce a lot of\nnice features that are very hard to implement if we treated statements as actual statements\n\n```rust\nlet foo = if 1 > 2 {\n    1\n} else {\n    for {\n        break 2\n    }\n}\n\nprint(foo)  // 2\n```\n\nUnfortunately, I realized the benefits of extensively using expressions too late.\n\nTODO\n\n## Don't add types as an afterthought\n\n## Multiple backends = exponential headaches\n\n## \"I won't need an IR\" is a lie\n","frontmatter":{"title":"Mistakes I made writing my first compiler, and what I would do better next time","date":"2022-11-28","tags":"note, 100DaysToOffload"},"tags":["note","100DaysToOffload"]},"recommendedPosts":[]},"__N_SSG":true}