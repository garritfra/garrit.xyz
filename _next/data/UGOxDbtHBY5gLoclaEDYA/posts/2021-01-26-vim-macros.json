{"pageProps":{"post":{"slug":"2021-01-26-vim-macros","markdownBody":"\nFor a long time, macros in Vim were a huge mystery for me. I knew they existed, but I didn't know how or why you'd use them. A recent task of mine involved replacing the unsafe operator (`!!`) in a large kotlin codebase with a null-safe operator (`?`). This game me a good opportunity to learn about macros. This is a snippet I encountered numerous times:\n\n```kt\nmLeftButton!!.text = \"Left\"\nmLeftButton!!.setOnClickListener(leftListener)\nmLeftButton!!.visibility = View.VISIBLE\nmRightButton!!.text = \"Right\"\nmRightButton!!.setOnClickListener(rightListener)\nmRightButton!!.visibility = View.VISIBLE\n```\n\nYou could go ahead and change each line individually, or use the IDEs built in \"multi-cursor\" tool to save you some work. But, let me show you how I automated this using a Vim-Plugin for Android Studio. Not that the plugin matter, it will work in every Vim-like editor.\n\nA macro in Vim works like this:\n\n1. Record any sequence of keystrokes and assign them to a key\n1. Execute that sequence as often as you wish\n\nSo let's see how we'd do that.\n\n## Recording a macro\n\nTo record a macro in Vim, you press `q` (In normal mode) followed by a key you want to assign the macro to. So, if you wanted to record a macro and save it to the `q` key, you'd press `qq`. Vim will notify you that a macro is being recorded. Now, you can press the keystrokes that define your actions. When you're done, press `q` in normal mode again to quit your macro.\n\nComing back to my task, I would want to do the following:\n\n1. `qq` Record a macro and save it to the `q` key\n1. `_` - Jump to the beginning of the line\n1. `f!` - Find next occurrence of `!`\n1. `cw` - Change word (Delete word and enter insert mode)\n1. `?.` - Insert the new characters\n1. `<esc>` - Enter normal mode\n1. `j` - go down a line\n1. `q` - Finish macro\n\nIf everything went right, this line:\n\n```\nmLeftButton!!.text = \"Left\"\n```\n\nShould now look like this:\n\n```\nmLeftButton?.text = \"Left\"\n```\n\nand your macro should be saved under the `q` key.\n\n## Using the macro\n\nIn order to use a macro in vim, you press the `@` key, followed by the key the macro is saved under. Since our macro is defined as `q`, we'd press `@q`, and the macro is executed immediately.\n\nLet's take this further. You might have noticed that I went down a line before closing the macro. This becomes handy when you want to execute it many times. In our case we have 6 lines we want to refactor. 1 line has already been altered, so we have to execute it 5 more times. As per usual with vim, you can execute an action n times by specifying a number before doing the action. Let's press `5@q` to execute the macro 5 times. And voila! Our unsafe code is now null-safe.\n\n```kt\nmLeftButton?.text = \"Left\"\nmLeftButton?.setOnClickListener(leftListener)\nmLeftButton?.visibility = View.VISIBLE\nmRightButton?.text = \"Right\"\nmRightButton?.setOnClickListener(rightListener)\nmRightButton?.visibility = View.VISIBLE\n```\n\nMacros are really satisfying to watch, if you ask me!\n\nThis is post 007 of [#100DaysToOffload](https://100daystooffload.com/).\n","frontmatter":{"title":"Using Macros in Vim","date":"2021-01-26","tags":"vim, 100DaysToOffload, guide, tech"},"tags":["vim","100DaysToOffload","guide","tech"]},"recommendedPosts":[{"slug":"2024-09-24-installing-mssql-client-drivers-for-a-php-application","frontmatter":{"title":"Installing MSSQL Client Drivers for a PHP Application","date":"2024-09-24","tags":"guide, note, web, tech, programming, php"},"tags":["guide","note","web","tech","programming","php"]},{"slug":"2024-08-31-sentiment-analysis-using-ml-models","frontmatter":{"title":"Sentiment analysis using ML models","date":"2024-08-31","tags":"note, tech, ai"},"tags":["note","tech","ai"]},{"slug":"2024-08-03-how-embedding-models-encode-semantic-meaning","frontmatter":{"title":"How embedding models encode semantic meaning","date":"2024-08-03","tags":"note, tech, math, llm, ai"},"tags":["note","tech","math","llm","ai"]},{"slug":"2024-07-02-linkdump-llms","frontmatter":{"title":"ðŸ”— Linkdump: LLMs","date":"2024-07-02","tags":"note, tech, linkdump, llm, ai"},"tags":["note","tech","linkdump","llm","ai"]},{"slug":"2024-06-27-testing-smtp-connections","frontmatter":{"title":"Testing SMTP connections","date":"2024-06-27","tags":"infrastructure, guide, note, learnings, tech"},"tags":["infrastructure","guide","note","learnings","tech"]}]},"__N_SSG":true}