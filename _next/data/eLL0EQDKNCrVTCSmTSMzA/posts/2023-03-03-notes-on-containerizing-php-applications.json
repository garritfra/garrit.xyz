{"pageProps":{"post":{"slug":"2023-03-03-notes-on-containerizing-php-applications","markdownBody":"\r\nI was recently tasked with building a rudimentary infrastructure for a PHP application. Coming from a Node.js-driven world where every human and their grandmother has a blog post about containerizing your application, it was very interesting to see where PHP differs to other applications.\r\n\r\nOne major gotcha for me was that PHP code is executed on **request-time**, meaning a new process is spawned for each incoming request. Most other languages have dedicated runtimes that handle incoming requests. This unique approach is very flexible and scalable, but it comes with the implication that there is a **separate webserver** that calls into the PHP interpreter when it needs to.\r\n\r\nIn Node.js (and most other languages), you can \"just run the app\", as demonstrated by this Dockerfile:\r\n\r\n```dockerfile\r\nFROM node:18.14.2-alpine3.17 AS build\r\n\r\nWORKDIR /usr/src/app\r\n\r\nCOPY package*.json ./\r\n\r\nRUN npm ci\r\n\r\nCOPY . .\r\n\r\nEXPOSE 3000\r\n\r\nCMD [ \"node\", \"server.js\" ]\r\n```\r\n\r\nPHP on the other side is rarely used on its own. Most of the time, it needs a webserver alongside it:\r\n\r\n```dockerfile\r\nFROM php:8.1-apache-bullseye\r\n\r\n# <snip>\r\n\r\nCOPY . /var/www/html\r\nWORKDIR /var/www/html\r\n\r\n# <snip>\r\n```\r\n\r\nAs you can see, I'm using the official PHP docker image. The PHP maintainers know that adding a webserver alongside PHP is a very common pattern, so most of the variants of the image ship with a webserver. In this example I'm using Apache, but we might as well use NGINX or some other webserver. There's also the option to use [FPM](https://www.php.net/manual/de/install.fpm.php) as a FastCGI implementation and a webserver in a **separate** container.\r\n\r\nGrasping this took me some time, but after it clicked it made many things a lot clearer.\r\n\r\n## More complete Dockerfile example\r\n\r\nThe Dockerfile above is meant to demonstrate how PHP applications differ from other languages. The following is a more complete example you can use to containerize your PHP application. In this case itâ€™s a Laravel app, so your mileage may vary.\r\n\r\n```dockerfile\r\nFROM php:8.1-apache-bullseye\r\n\r\nRUN apt-get clean && \\\r\n    apt-get update && \\\r\n    apt-get install --fix-missing -y \\\r\n        zip && \\\r\n    docker-php-ext-install \\\r\n        pdo \\\r\n        pdo_mysql \\\r\n        bcmath\r\n\r\nCOPY --from=composer:2 /usr/bin/composer /usr/bin/composer\r\n\r\nCOPY . /var/www/html\r\nWORKDIR /var/www/html\r\n\r\nENV APACHE_DOCUMENT_ROOT /var/www/html/public\r\n\r\nRUN composer install --no-dev --optimize-autoloader --no-interaction && \\\r\n    sed -ri -e 's!/var/www/html!${APACHE_DOCUMENT_ROOT}!g' /etc/apache2/sites-available/*.conf && \\\r\n    sed -ri -e 's!/var/www/!${APACHE_DOCUMENT_ROOT}!g' /etc/apache2/apache2.conf /etc/apache2/conf-available/*.conf && \\\r\n    php artisan config:cache && \\\r\n    php artisan view:cache && \\\r\n    php artisan route:cache && \\\r\n    php artisan storage:link && \\\r\n    chmod 777 -R /var/www/html/storage/ && \\\r\n    chown -R www-data:www-data /var/www/ && \\\r\n    a2enmod rewrite\r\n```\r\n\r\n---\r\nThis is post 052 of [#100DaysToOffload](https://100daystooffload.com/).\r\n","frontmatter":{"title":"Notes on containerizing PHP applications","date":"2023-03-03","tags":"note, infrastructure, docker, php, 100DaysToOffload, tech"},"tags":["note","infrastructure","docker","php","100DaysToOffload","tech"]},"recommendedPosts":[{"slug":"2024-09-24-installing-mssql-client-drivers-for-a-php-application","frontmatter":{"title":"Installing MSSQL Client Drivers for a PHP Application","date":"2024-09-24","tags":"guide, note, web, tech, programming, php"},"tags":["guide","note","web","tech","programming","php"]},{"slug":"2024-08-31-sentiment-analysis-using-ml-models","frontmatter":{"title":"Sentiment analysis using ML models","date":"2024-08-31","tags":"note, tech, ai"},"tags":["note","tech","ai"]},{"slug":"2024-08-03-how-embedding-models-encode-semantic-meaning","frontmatter":{"title":"How embedding models encode semantic meaning","date":"2024-08-03","tags":"note, tech, math, llm, ai"},"tags":["note","tech","math","llm","ai"]},{"slug":"2024-07-02-linkdump-llms","frontmatter":{"title":"ðŸ”— Linkdump: LLMs","date":"2024-07-02","tags":"note, tech, linkdump, llm, ai"},"tags":["note","tech","linkdump","llm","ai"]},{"slug":"2024-06-27-testing-smtp-connections","frontmatter":{"title":"Testing SMTP connections","date":"2024-06-27","tags":"infrastructure, guide, note, learnings, tech"},"tags":["infrastructure","guide","note","learnings","tech"]}]},"__N_SSG":true}