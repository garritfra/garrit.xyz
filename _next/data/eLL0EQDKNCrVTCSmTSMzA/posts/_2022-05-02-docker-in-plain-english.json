{"pageProps":{"post":{"slug":"_2022-05-02-docker-in-plain-english","markdownBody":"\nRecently I saw some fellow Mastodon-users discussing resources and guides to get\ninto the docker ecosystem. Given that most of my private infrastructure is built\nupon docker and docker-compose, I thought I'd share how **I** use this tool. I\nwill try to assume no prior container-knowledge, but if anything isn't clear to\nyou, feel free to [contact me](/contact).\n\n## Docker 101\n\nFirst up: What on earth is Docker, and why should I use it?\n\nDocker is a _container runtime_. It can be used to isolate system resources in a\nreproducible manner, meaning if I containerize an application on my machine, I\ncan be sure that it will function exactly the same on all machines. The benefits\nof this are obvious: You more or less eliminate all dependencies to a specific\nenvironment, like the operating system and other software. As long as it's the\nsame CPU-architecture, this sentence holds true: If it runs docker, it can run\nyour application.\n\nThings running in a container also can't break out of this \"sandbox\". A process\nin a container is only aware of the resources around it, not on the host\nmachine. Each container is kind of like an operating system **inside** your\nactual operating system.\n\nTo describe what a container should look like, we need to write a \"recipe\" for\nit. In it, you describe a starting point from which you want to build upon, and\nthe necessary steps to achieve the desired state. This \"recipe\" is called a\n`Dockerfile`. A very simple Dockerfile might look like this:\n\n```\nFROM ubuntu\n\nRUN apt update && apt upgrade -y\n\nCMD [\"echo\", \"Hello World!\"]\n```\n\nIf you now run `docker build -t hello-world .`, docker will take this recipe and\nbuild an **image** called \"hello-world\". This image is a template that describes\nthe state of your application. In our case, we take the definition provided by\nthe \"ubuntu\" image and simply do a system update. Whenever you spawn a container\nfrom this image, it will always start from exactly this state. Note that the\ncommands in the Dockerfile do not run every time you launch a container! An\nimage is the **result** of running the commands. The final instruction, `CMD`,\nis the command to run whenever you spawn a container, but more on that later.\n\nCongrats! You just built your very first docker image. To verify that it's\nactually there, try running `docker image ls`. This will list all images on your\nsystem:\n\n```\n➜  garrit.xyz git:(master) ✗ docker image ls\nREPOSITORY               TAG             IMAGE ID       CREATED          SIZE\nhello-world              latest          6e2240011a89   8 minutes ago    109MB\n```\n\nAn image doesn't really do anything on its own. You need to tell docker to\nconstruct a container out of that image. A container is essentially an\n**instance** of that image. Try running this command:\n\n```\ndocker run hello-world\n```\n\nAnd, as instructed with the `CMD` line, you should see the words \"Hello World!\"\nprinted on the screen. You can verify that it's still there by running `docker ps -a`, which will list all containers on your system, including the one you\njust ran:\n\n```\nCONTAINER ID   IMAGE                    COMMAND                  CREATED          STATUS                      PORTS                                            NAMES\n05415bf66a91   hello-world              \"bash\"                   3 seconds ago    Exited (0) 2 seconds ago\n```\n\n\"This isn't really helpful!\", I hear you yell. You're right, so let's look at a\nreal world example.\n\n## Example: A simple Node.js application\n\nA real world use case for a docker container is run your home-built application.\nSay we have a basic Node.js app that we wanted to containerize:\n\n```\n.\n├── app.js\n├── package-lock.json\n└── package.json\n```\n\nAnd your main setup-workflow for this application looks something like this:\n\n```\nnpm install\nnpm start\n```\n\nRemember that a Dockerfile is a **recipe** of how an application is built. A\ncorresponding recipe could look like this:\n\n```Dockerfile\n# Declare base image\nFROM node:16\n\n# Copy the application into the container\nCOPY . .\n\n# Install dependencies\nRUN npm install\n\n# Launch the application\nCMD [\"npm\", \"start\"]\n```\n\nLike above, you can build this Dockerfile using `docker build -t testapp .`, or\nany name you'd like to use.\n\n> **Quick Tip**: You might also want to add a `.Dockerignore` file, which lists\n> files and directories which should not be copied inside the container, just like\n> a `.gitignore` file. I usually add `node_modules` since it will be recreated\n> when building the image, and some files that are not relevant at runtime, like a\n> README.\n\nRunning `docker image ls` should now show the image you just created:\n\n```\nREPOSITORY               TAG             IMAGE ID       CREATED             SIZE\ntestapp                  latest          463e68d86eee   5 minutes ago       857MB\n```\n\nYou can now \"run\" the image, which will result in a spawned container. Since\nContainers run in their own environment, they won't be able to receive any\nkeystrokes by default, so you can't stop the application. To fix this, you can\nuse the `-it` flags, which will establish an interactive session to the process\ninside the container. This makes it easier to stop the container after it is\ncreated:\n\n```\ndocker run -it testapp\n```\n\nAnd voila! You should see the output of your application in the terminal. If\nyou've done some Node.js, this output might be familiar:\n\n```\n➜  testapp git:(master) ✗ docker run -ti testapp\n\n> testapp@1.0.0 start\n> node app.js\n\nExample app listening at http://:::8080\n```\n\nYou'll soon discover that you can't access port 8080 on your machine. Docker has\na powerful networking engine, and each container has its own IP. You _could_\nfigure out the IP of your container and access it like that. A simpler approach\nthough is to just bind a port of your host machine to the container. For\nexample, let's bind our port 4000 to port 8081 of the container. This can be\ndone using the `-p` flag of the cli:\n\n```\ndocker run -p 4000:8081 -it testapp\n```\n\n> **Quick Tip**: To remember the order of the container- and the host-port, I\n> always think of the container as laying on my desk. First, I grab the cable (the\n> host machine) and then plug it into the container. Weird analogy, I know. But it\n> really helped me make sense of this!\n\nIf you now access `http://localhost:4000` on your host machine, you should see\nyour application!\n\n## Docker Compose 101\n\nNow that we've looked at the basics of Docker, let's talk about Docker Compose.\nDocker Compose is a tool that allows you to define and manage multi-container\napplications. This means you can use a single docker-compose.yml file to define\nthe services and dependencies of your application, and then use Docker Compose\nto start and stop all of the containers at once.\n\nUsing Docker Compose can save you a lot of time and hassle, especially if you\nhave a complex application with multiple components that need to work together.\nWith Docker Compose, you can specify the dependencies between your containers,\nas well as the ports, volumes, and other settings that they need to run\nproperly. This makes it much easier to manage and maintain your application, and\nallows you to make changes to your environment quickly and easily.\n\nHere is an example docker-compose.yml file for a simple Node.js application:\n\n```yaml\nversion: '3'\nservices:\n  app:\n    build: .\n    ports:\n      - 3000:3000\n    volumes:\n      - .:/usr/src/app\n    command: npm start\n```\n\nIn this file, we define a single service called \"app\" that uses the Dockerfile\nin the current directory to build an image. We then map port 3000 on the host\nmachine to port 3000 on the container, mount the current directory as a volume,\nand specify the command to run when the container is started.\n\nTo start the containers defined in this docker-compose.yml file, you can run the following command:\n\n```\ndocker-compose up\n```\n\nThis will build the images, create the containers, and start all of the\nservices. You can then access your application at http://localhost:3000.\n\nTo stop the containers and remove them, you can run the following command:\n\n```\ndocker-compose down\n```\n\nThis will stop and remove the containers, as well as the networks and volumes\nthat we've created.\n\n## How I deploy my services\n\n- Walkthrough of a simple deployment (miniflux?)\n- Traefik\n- Local volumes\n- Permissions\n\n## Conclusion\n\n- Image size optimizations\n\nThis is post 030 of [#100DaysToOffload](https://100daystooffload.com/).\n","frontmatter":{"title":"Docker in plain english","date":"2022-05-02","tags":"guide, docker, infrastructure, 100DaysToOffload"},"tags":["guide","docker","infrastructure","100DaysToOffload"]},"recommendedPosts":[{"slug":"2024-09-24-installing-mssql-client-drivers-for-a-php-application","frontmatter":{"title":"Installing MSSQL Client Drivers for a PHP Application","date":"2024-09-24","tags":"guide, note, web, tech, programming, php"},"tags":["guide","note","web","tech","programming","php"]},{"slug":"2024-06-27-testing-smtp-connections","frontmatter":{"title":"Testing SMTP connections","date":"2024-06-27","tags":"infrastructure, guide, note, learnings, tech"},"tags":["infrastructure","guide","note","learnings","tech"]},{"slug":"2024-06-17-host-your-own-llm","frontmatter":{"title":"Host your own LLM","date":"2024-06-17","tags":"infrastructure, guide, note, homelab, tech, llm, ai"},"tags":["infrastructure","guide","note","homelab","tech","llm","ai"]},{"slug":"2024-06-03-i-just-cleaned-up-40-gb-of-brew-caches","frontmatter":{"title":"I just cleaned up 40 GB of Brew caches","date":"2024-06-03","tags":"guide, note, tech"},"tags":["guide","note","tech"]},{"slug":"2024-05-24-going-from-self-hosted-to-managed-software","frontmatter":{"title":"Going from self hosted to managed software","date":"2024-05-24","tags":"infrastructure, note, learnings, opinion, homelab, tech"},"tags":["infrastructure","note","learnings","opinion","homelab","tech"]}]},"__N_SSG":true}