<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>
            garrit.xyz
        </title>
        <link>
            https://garrit.xyz
        </link>
        <description>
            Garrit Franke
        </description>
        <language>
            en
        </language>
        <lastBuildDate>
            Tue, 20 May 2025 00:00:00 +0000
        </lastBuildDate>
        <item>
            <title>
                No matter what you do, always leave a breadcrumb
            </title>
            <guid>
                https://garrit.xyz/posts/2025-05-20-no-matter-what-you-do-always-leave-a-breadcrumb
            </guid>
            <link>
                https://garrit.xyz/posts/2025-05-20-no-matter-what-you-do-always-leave-a-breadcrumb?utm_source=rss
            </link>
            <pubDate>
                Tue, 20 May 2025 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>This applies to work tasks just as much as it applies to hobbies. No matter what you do, always create some sort of breadcrumb that you or someone else can pick up down the line.</p>

<p>If you build a feature into your app, you&#39;ve generated an output, and therefore value. But what if you bang your head against the wall and don&#39;t make any progress? Write about it. Write about your challenges, document what you&#39;ve learned and share it with your peers. Not reaching a set goal doesn&#39;t mean failure. It&#39;s an opportunity to create value in a way you didn&#39;t anticipate.</p>

<p>If you&#39;re out on a run and a thought pops into your head, record a memo on your phone, or better yet: <a href="https://garrit.xyz/posts/2023-09-09-everyday-carry-notebooks">keep a tiny notebook with you at all times</a>. Thoughts slip in and out of our heads at a very rapid pace. Capturing thoughts, even if you don&#39;t share them with anyone else, is a great way to generate value out of thin air.</p>

<p>If you&#39;re into crafty hobbies like woodworking, painting or baking, you likely know how important it is to finish a project. No matter how good or bad the outcome is, every finished project is an artifact that you can look back at later and see the progress you&#39;ve made.</p>

<p>Output always means value, even if it&#39;s not immediately apparent. Just keep on laying down those breadcrumbs.</p>]]>
            </description>
        </item>
        <item>
            <title>
                To prove something is true, try disproving it first
            </title>
            <guid>
                https://garrit.xyz/posts/2024-01-30-to-prove-something-is-true-try-disproving-it-first
            </guid>
            <link>
                https://garrit.xyz/posts/2024-01-30-to-prove-something-is-true-try-disproving-it-first?utm_source=rss
            </link>
            <pubDate>
                Tue, 30 Jan 2024 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>We&#39;ve been taught that, to prove that a thing is true, we should point out what&#39;s true about it.</p>

<p>However, we can learn much more about why something is true by trying to <strong>disprove</strong> it first. If you think something is true, try as hard as you can to prove that it&#39;s false.</p>

<p>Disproving a theory is core to the <a href="https://en.wikipedia.org/wiki/Scientific_method">scientific method</a>. Only when we validate that something cannot be false, we come closer to proving that it&#39;s true.</p>

<h2>Source</h2>

<p>&lt;iframe src=&quot;https://www.youtube.com/embed/vKA4w2O61Xo?si=2dtApWo8JmHOwqff&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&gt;&lt;/iframe&gt;</p>]]>
            </description>
        </item>
        <item>
            <title>
                Greg, the Developer
            </title>
            <guid>
                https://garrit.xyz/posts/2024-01-05-greg-the-developer
            </guid>
            <link>
                https://garrit.xyz/posts/2024-01-05-greg-the-developer?utm_source=rss
            </link>
            <pubDate>
                Fri, 05 Jan 2024 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>This is Greg. Greg loves to play with his computer and create amazing things.</p>

<p><img alt="Greg" src="/assets/posts/2024-01-05-greg-the-developer/greg.svg"/></p>

<p>Greg has many friends. He listens to his friends and helps them. Greg knows that teamwork is very important.</p>

<p><img alt="Greg and his friends" src="/assets/posts/2024-01-05-greg-the-developer/greg-friends.svg"/></p>

<p>Greg is curious about what his friends do. Greg learned how they help everyone create amazing things. Greg was happy that he learned something new.</p>

<p><img alt="Greg learns from his friends" src="/assets/posts/2024-01-05-greg-the-developer/greg-learning.svg"/></p>

<p>One day, Greg has an idea. Greg shares his idea with his friends. They try it, and it works! Everyone is happy that Greg shared his idea.</p>

<p><img alt="Greg has an idea" src="/assets/posts/2024-01-05-greg-the-developer/greg-idea.svg"/></p>

<p>When Greg learns something new about computers, he writes it down and shows it to his friends. This helps everyone learn how computers work.</p>

<p><img alt="Greg writes down what he learned" src="/assets/posts/2024-01-05-greg-the-developer/greg-documentation.svg"/></p>

<p>Sometimes Greg and his friends make a mistake, but Greg knows that&#39;s okay. Everyone makes mistakes, even Greg. He says that everyone can learn from mistakes. This makes them better and happier.</p>

<p><img alt="It&#39;s okay to make mistakes" src="/assets/posts/2024-01-05-greg-the-developer/greg-mistake.svg"/></p>

<p>Greg is a good software developer. Be like Greg.</p>

<p><img alt="Greg is a good software developer" src="/assets/posts/2024-01-05-greg-the-developer/greg-okay.svg"/></p>]]>
            </description>
        </item>
        <item>
            <title>
                re: Writing code for both computers and humans
            </title>
            <guid>
                https://garrit.xyz/posts/2023-11-20-re--writing-code-for-both-computers-and-humans
            </guid>
            <link>
                https://garrit.xyz/posts/2023-11-20-re--writing-code-for-both-computers-and-humans?utm_source=rss
            </link>
            <pubDate>
                Mon, 20 Nov 2023 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<blockquote><p>This is a reply to Tony Mottaz&#39; <a href="https://www.tonymottaz.com/code-for-computers-and-humans/">blog post</a> about code that&#39;s easy to understand for humans.</p></blockquote>

<p>The understandability of a piece of code can be measured by how much time one needs to grasp its behavior. Less cognitive load usually means easier, and therefore faster, to understand.</p>

<p>Tony argues that the verbose version of the code (<code>isNaN(defaultValue) ? NaN : defaultValue;</code>) is better than the optimized version (<code>defaultValue;</code>) because it proves that the author has thought of the possible sideeffect.</p>

<p>However, I personally think this is in fact bad code. Although the code is <strong>trying</strong> to make obvious what it&#39;s doing, Tony had to pause and think about why it&#39;s written this way. This probably interrupted their flow of work, which is highly undesired. A short comment should have the same effect while keeping the reader in their flow. This is a perfect example for the &quot;<a href="https://www.jackfranklin.co.uk/blog/code-comments-why-not-how/">comment the why, now the how</a>&quot; mantra.</p>

<p>I really enjoyed Tony&#39;s post. It does a great job emphasizing that we should be curious about the code we read and write.</p>

<hr/>

<p>This is post 086 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Principles of DevOps: Flow
            </title>
            <guid>
                https://garrit.xyz/posts/2023-07-12-principles-of-devops--flow
            </guid>
            <link>
                https://garrit.xyz/posts/2023-07-12-principles-of-devops--flow?utm_source=rss
            </link>
            <pubDate>
                Wed, 12 Jul 2023 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<blockquote><p>This post is part of a series called <a href="/posts?tags=PrinciplesOfDevOps">Principles of DevOps</a>.</p></blockquote>

<p>&quot;Flow&quot; refers to the performance of a system, as opposed to the performance of a specific silo or department.</p>

<p>In our daily work, we often only see what&#39;s inside our own silo. As a developer, we see requirements come in and code going out. In operations, we see code being pushed to a repository and pipelines deploying it to production. However, it&#39;s crucial to understand the flow of work in a broader context.</p>

<p>Most services or products have a &quot;value stream&quot; which describes how work is performed. You can think of the value stream as a carrier belt with multiple work centers. The first work center might be the business department, followed by a design team, a dev team, QA, operations and finally the customer. This structure might look different, depending on what product or service you are building.</p>

<h2>The flow of work should always go in one direction</h2>

<p>Work is typically generated at some point of the value stream. A requirement by the business department, an issue created by the QA team, an incident in operations, feedback from a customer, and so on.</p>

<p>Regardless of where the work originates, the flow of work should always go in one direction: forward. Work moving backwards, or even standing still, introduces bottlenecks that prevent downstream work centers from properly working. Always seek to resolve these bottlenecks as soon as possible.</p>

<h2>Always seek to increase flow</h2>

<p>The goal of almost any product or service is to bring value to the customer. More work flowing through the system means more value generated. But how do we increase the flow of work?</p>

<p><strong>Eliminate work in progress</strong>. This almost always indicates a bottleneck in one of the workcenters. Work should always flow smoothly through the system. If a ticket is stuck in one department for too long, ask why and how this can be avoided in the future.</p>

<p><strong>Match the pace of the customer</strong>. If the value stream is pumping out more features than the customer demands, you are not generating value to the business.</p>

<p><strong>Reduce work batch size</strong>. By <a href="https://garrit.xyz/posts/2023-05-19-work-batch-sizing">iterating in small steps</a>, you can adapt to changes more quickly. Split up requirements into smaller tickets and increase the amount of deployments.</p>

<p>If you want to learn more about how to increase flow in a system, see <a href="https://en.wikipedia.org/wiki/Theory_of_constraints">theory of constraints</a> and the <a href="https://hbswk.hbs.edu/item/decoding-the-dna-of-the-toyota-production-system">Toyota production system</a>.</p>

<h2>Never unconsciously pass known defects downstream</h2>

<p>Aim to fix problems immedietely as they occur, especially if it&#39;s higher up in the value stream. Everyone should be responsible for the work of the entire value stream instead of just their work center.</p>

<p>If you notice work or problems being introduced multiple times, it&#39;s likely the upstream work center is unaware of this. Immediately seek awareness and work together on resolving it.</p>

<h2>Never allow local optimization to create global degradation</h2>

<p>Optimizing local work is important, but it should never introduce friction in other workcenters and, by extension, decrease performance of the value stream.</p>

<p>Local optimization is often linked to the &quot;tribal warfare&quot; between organizations (e.g. development vs. operations, business vs. development, etc.).</p>

<h2>Conclusion</h2>

<p>Understanding and optimizing the flow of work within a value stream is crucial for achieving efficient and effective software delivery. By ensuring that work moves in one direction and continuously seeking to increase the flow, we can generate more value for customers and the business.</p>

<p>Eliminating bottlenecks, matching the pace of the customer, and reducing work batch size are all key strategies to enhance flow. Moreover, actively addressing known defects, promoting collaboration across the value stream, and avoiding local optimizations that hinder overall performance are essential for achieving successful outcomes. By embracing these principles, we can unlock the full potential of DevOps and drive continuous improvement in software delivery processes.</p>

<h2>Resources</h2>

<ul><li><a href="https://itrevolution.com/articles/the-three-ways-principles-underpinning-devops/">The Three Ways: The Principles Underpinning DevOps</a></li><li><a href="https://itrevolution.com/articles/elements-of-the-first-way-and-the-devops-implications/">Elements Of The First Way: And The DevOps Implications</a></li><li><a href="https://en.wikipedia.org/wiki/Theory_of_constraints">Theory Of Constraints</a></li><li><a href="https://en.wikipedia.org/wiki/Lean_IT">Lean IT</a></li></ul>

<hr/>

<p>This is post 073 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Principles of DevOps: Introduction
            </title>
            <guid>
                https://garrit.xyz/posts/2023-07-11-principles-of-devops-introduction
            </guid>
            <link>
                https://garrit.xyz/posts/2023-07-11-principles-of-devops-introduction?utm_source=rss
            </link>
            <pubDate>
                Tue, 11 Jul 2023 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>I recently changed roles in my company, and I can officially call myself a &quot;DevOps Engineer&quot; now. But what does that really mean?</p>

<p>In an attempt to write down my thoughts about this topic, I&#39;m starting a series of blog posts called &quot;Principles of DevOps&quot;. I&#39;m usually very bad at sticking to things, so I&#39;m curious to see if this series will lead anywhere.</p>

<p>To collect the posts of this series, I created a tag called <a href="/posts?tags=PrinciplesOfDevOps">#PrinciplesOfDevOps</a>. If you&#39;re reading this in the future, be sure to check out this tag to see all installments.</p>

<h2>What is DevOps?</h2>

<p>Let&#39;s kick off the series with a very basic question: What on earth is DevOps?</p>

<p>DevOps is often used as an inflationary term to describe &quot;whatever comes after dev&quot;. This can&#39;t be further from the truth.</p>

<p>In the past, developers, operations, designers, QA and other stakeholders of an applications were often implicitly trained to work in &quot;silos&quot;. Once designers have finished their job, they pass their mockups to developers. When developers are done writing the application, they pass their code to operations, whose job it is to deploy it.</p>

<p>DevOps is a set of practices that aims to combine the work of project stakeholders to unite people, process, and technology in application planning, development, delivery, and operations. Although the term DevOps only consists of &quot;Dev&quot; and &quot;Ops&quot;, it has since evolved to include design, quality assurance and security. You may have heard of &quot;DevSecOps&quot;, which aims to incorporate more roles into the term, but &quot;DevOps&quot; seems to stick the best with most people.</p>

<h2>What does a &quot;DevOps Engineer&quot; do?</h2>

<p>I recently wrote a blog post about this: <a href="/posts/2023-04-22-the-role-of-a-devops-engineer">The role of a DevOps Engineer</a>.</p>

<p>In short, the job of a DevOps Engineer is to reduce the friction between stakeholders of a project. A collegue of mine explained this in a really good way:</p>

<blockquote><p>A DevOps Engineer doesn&#39;t push the button, they enable the developers to push the button themselves.</p></blockquote>

<h2>Let&#39;s jump in!</h2>

<p>I hope by now you have a vague sense of what DevOps is. Next up, I want to uncover the principles and practices of DevOps. Thanks for reading to the end!</p>

<hr/>

<p>This is post 072 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Optimizing work batch size
            </title>
            <guid>
                https://garrit.xyz/posts/2023-05-19-work-batch-sizing
            </guid>
            <link>
                https://garrit.xyz/posts/2023-05-19-work-batch-sizing?utm_source=rss
            </link>
            <pubDate>
                Fri, 19 May 2023 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>I&#39;ve been playing 
<a href="https://en.m.wikipedia.org/wiki/Carcassonne_(board_game)">Carcassonne</a> a lot with my girlfriend recently. It&#39;s a boardgame about building cities, roads and farms, and each completed &quot;project&quot; earns you some amount of points. The twist is that there&#39;s only a limited number of tiles, and once all tiles are used, the game is over unfinished projects are discarded.</p>

<p>The first couple of playthroughs I tried to maximize my score by increasing the number of projects I actively had going. I&#39;d start a new city or road whenever I could, thinking that the multipliers you sometimes get would pay off in the end. Boy was I wrong.</p>

<p>Where I&#39;m from, we have multiple sayings for this approach. &quot;Having too many irons in the fire&quot; or &quot;dancing on too many parties&quot;. I was too busy starting new projects instead of making actual progress.</p>

<p>A far better approach is to finish projects early, earning less points, but with a greater certainty that they will pay off. With every project you start, the likelyhood of the other projects paying off decreases.</p>

<p>Keeping batch sizes small was a key concept of the <a href="https://en.m.wikipedia.org/wiki/Lean_manufacturing">lean manufacturing movement</a> in the 1980s, and has since been adopted by the <a href="https://de.m.wikipedia.org/wiki/DevOps">DevOps movement</a> for the IT industry. If you want to learn more about this topic, you should check out <a href="https://itrevolution.com/product/the-devops-handbook-second-edition/">The DevOps Handbook</a>. It goes well beyond the basics of making IT processes more productive and efficient.</p>

<p>After realizing that small batch sizes are the key to success, I haven&#39;t lost a game of Carcassonne since. I hope you&#39;re not reading this, honey.🤭</p>

<hr/>

<p>This is post 068 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                The role of a DevOps Engineer
            </title>
            <guid>
                https://garrit.xyz/posts/2023-04-22-the-role-of-a-devops-engineer
            </guid>
            <link>
                https://garrit.xyz/posts/2023-04-22-the-role-of-a-devops-engineer?utm_source=rss
            </link>
            <pubDate>
                Sat, 22 Apr 2023 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>The term &quot;DevOps&quot; can be interpreted in many different ways. It&#39;s often thrown around as a buzzword whenever somebody is talking about &quot;what comes after development&quot;. Obviously, it&#39;s not just that. Or is it? It depends on whom you&#39;re talking to.</p>

<p>Although I just recently started my new role as a &quot;DevOps Engineer&quot;, I&#39;m still discovering what that term means to me. I just had a fruitful conversation with the DevOps lead of a client, and they phrased this role in a very fitting way.</p>

<blockquote><p>A DevOps Engineer doesn&#39;t push the button, they enable the developers to push the button themselves.</p></blockquote>

<p>To me this role is fascinating, since it touches so many different aspects of software delivery.</p>

<hr/>

<p>This is post 065 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Software is not defined by the language it's written in
            </title>
            <guid>
                https://garrit.xyz/posts/2023-03-26-software-is-not-defined-by-the-language-it's-written-in
            </guid>
            <link>
                https://garrit.xyz/posts/2023-03-26-software-is-not-defined-by-the-language-it's-written-in?utm_source=rss
            </link>
            <pubDate>
                Sun, 26 Mar 2023 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>Rust is not just a programming language, it&#39;s also a status symbol. By now, it kind of became a meme that people writing programs in Rust have to make explicit that &quot;X is written in Rust&quot;.</p>

<p>How fast or safe the language is doesn&#39;t define how good the software is. Software in TypeScript can be just as good as software written in C, if written by the right people.</p>

<p>When starting a new project, try to focus on the domain of the problem and pick a language based on that. Don&#39;t decide on the language before you know what problem you&#39;re trying to solve. If the answer to this is always one option (like Rust), <a href="https://seths.blog/2023/03/the-answer-to-every-question/">you might be in a bubble</a>.</p>

<hr/>

<p>This is post 060 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                A software requirements checklist
            </title>
            <guid>
                https://garrit.xyz/posts/2023-03-11-a-software-requirements-checklist
            </guid>
            <link>
                https://garrit.xyz/posts/2023-03-11-a-software-requirements-checklist?utm_source=rss
            </link>
            <pubDate>
                Sat, 11 Mar 2023 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>I just found a <a href="https://www.etsy.com/codeascraft/a-checklist-manifetsy">great post</a> on the Etsy Engineering blog suggesting a possible checklist for new product requirements. In reality, this checklist is very hard to fulfill, but it&#39;s a nice reminder of what a well thought out requirement could look like.</p>

<h3>Scope</h3>

<ul><li>Is the feature meant to be very polished and finished or are we just trying to get user feedback as an MVP?</li><li>If we are running a MVP, is the current feature a true MVP? How can we simplify or cut scope?</li></ul>

<h3>Eligibility</h3>

<ul><li>What populations should be included or excluded from the experiment? When should users see this feature? (Which pages, signed in/signed out, mobile, desktop, etc.)
Where/when should bucketing occur?</li><li>Will the experiment conflict with any other experiments? Do the experiments need to run exclusively?</li><li>What countries should the experiment run in (can impact translations)?</li></ul>

<h3>A11Y</h3>

<ul><li>Is there any special accessibility work this feature will require? If extra work is anticipated, check in early with our a11y team.</li><li>When testing and developing we should keep two users in mind - a keyboard user and a voice over user, do we need to add other code for these users?</li></ul>

<h3>Translations</h3>

<ul><li>Are there any strings to be translated that should be submitted ASAP?</li><li>Do we need to translate any labels for a11y?</li></ul>

<h3>Observability</h3>

<ul><li>How will we know that the feature is working? Are there existing graphs we can use or do we need new ones?</li><li>Should any of these metrics have a threshold or alerting?</li><li>Are we missing any key events to obtain user feedback?</li><li>How will we compare our control and variant?</li></ul>

<h3>Performance</h3>

<ul><li>Is there anything in my experiment that could degrade performance of the site?</li><li>Do I need an operational experiment to verify that I’m not impacting performance?</li></ul>

<h3>Error States</h3>

<ul><li>Do we have designs for loading states?</li><li>Do we have designs for unsuccessful requests and error handling?</li><li>Do we have informative logging when there are errors?</li></ul>

<h3>QA</h3>

<ul><li>What set of browsers and devices should we test our new feature against?</li><li>Which user perspectives do we need to test?</li></ul>

<h3>Ramping</h3>

<ul><li>What will our ramping strategy be?</li></ul>

<hr/>

<p>Check out the <a href="https://www.etsy.com/codeascraft/a-checklist-manifetsy">original post</a> for a full writeup and the intentions behind this checklist.</p>

<hr/>

<p>This is post 056 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
    </channel>
</rss>