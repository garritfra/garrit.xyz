<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>
            garrit.xyz
        </title>
        <link>
            https://garrit.xyz
        </link>
        <description>
            Garrit Franke
        </description>
        <language>
            en
        </language>
        <lastBuildDate>
            Wed, 11 Jun 2025 00:00:00 +0000
        </lastBuildDate>
        <item>
            <title>
                git diff --ignore-all-space makes code reviews way easier
            </title>
            <guid>
                https://garrit.xyz/posts/2025-06-11-git-diff-ignore-all-space-makes-code-reviews-way-easier
            </guid>
            <link>
                https://garrit.xyz/posts/2025-06-11-git-diff-ignore-all-space-makes-code-reviews-way-easier?utm_source=rss
            </link>
            <pubDate>
                Wed, 11 Jun 2025 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>I just learned a cool trick that I want to share. Let&#39;s review the diff of a file using <code>git diff</code>. I redacted most of it, but you probably found yourself in the situation of extremely long changes before:</p>

<p><code></code>`
diff --git a/lib/ui/screens/detail/components/body/event<em>body.dart b/lib/ui/screens/detail/components/body/event</em>body.dart
index d19d70a..1a61380 100644
--- a/lib/ui/screens/detail/components/body/event<em>body.dart
+++ b/lib/ui/screens/detail/components/body/event</em>body.dart
@@ -3,6 +3,7 @@
 class EventBody extends StatelessWidget {
   final EventDetails details;
@@ -18,35 +19,43 @@ class EventBody extends StatelessWidget {</p>

<p>   @override
   Widget build(BuildContext context) =&gt; Column(
-        crossAxisAlignment: CrossAxisAlignment.stretch,
-        children: [
-          EventInfoView(
-            location: details.location,
-            start: details.start,
-            end: details.end,
-            certified: details.certified,
-            paid: details.paid,
-            points: null, // Already shown in app bar
+    crossAxisAlignment: CrossAxisAlignment.stretch,
+    children: [
+      EventInfoView(
+        location: details.location,
+        start: details.start,
+        end: details.end,
+        certified: details.certified,
+        paid: details.paid,
+        points: null, // Already shown in app bar
+      ),
+      const SizedBox(height: 24),
+      Html(
+        data: details.description,
+        style: {
+          &#39;body&#39;: Style(
+            margin: Margins.zero,
...
 }
<code></code>`</p>

<p>But do you spot what has ACTUALLY been changed? In a real world scenario, it probably took you a while before you realised that it&#39;s the result of formatting the entire file. Nobody cares about whitespace when reviewing code. Or rather, your brain should not take the burden of having to care about that. That&#39;s what linters are for!</p>

<p>Let&#39;s look at the same diff with the <code>--ignore-all-space</code> (shorthand <code>-w</code>) flag activated:</p>

<p><code>
diff --git a/lib/ui/screens/detail/components/body/event_body.dart b/lib/ui/screens/detail/components/body/event_body.dart
index d19d70a..1a61380 100644
--- a/lib/ui/screens/detail/components/body/event_body.dart
+++ b/lib/ui/screens/detail/components/body/event_body.dart
@@ -3,6 +3,7 @@
 class EventBody extends StatelessWidget {
   final EventDetails details;
@@ -29,6 +30,14 @@ class EventBody extends StatelessWidget {
         points: null, // Already shown in app bar
       ),
       const SizedBox(height: 24),
+      Html(
+        data: details.description,
+        style: {
+          &#39;body&#39;: Style(
+            margin: Margins.zero,
+          ),
+        },
+      ),
       Text(details.description, style: context.theme.textTheme.body2Regular),
       if (details.registrationUrl != null || details.programUrl != null) const SizedBox(height: 16),
       if (details.registrationUrl != null) ...[
</code></p>

<p>Huh, so it&#39;s NOT just a formatted file. All whitespace changes have been stripped out, and you only see the changes that are relevant for the review. Neat!</p>

<p>Many tools also support ignoring whitespace. GitLab let&#39;s you disable <code>Show whitespace changes</code> in the merge request diff viewer. VSCode has the <code>diffEditor.ignoreTrimWhitespace</code> setting. So, if you want to make this the default in your tools, chances are there&#39;s an option for only showing relevant changes.</p>

<p>A bit of a sloppy post, but I hope this is useful to someone. Happy code reviewing!</p>]]>
            </description>
        </item>
        <item>
            <title>
                A trick to manage frequently used prompts in Claude/ChatGPT
            </title>
            <guid>
                https://garrit.xyz/posts/2025-02-27-a-trick-to-manage-frequently-used-prompts-in-claude-chatgpt
            </guid>
            <link>
                https://garrit.xyz/posts/2025-02-27-a-trick-to-manage-frequently-used-prompts-in-claude-chatgpt?utm_source=rss
            </link>
            <pubDate>
                Thu, 27 Feb 2025 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>So far, whenever I wanted to recycle a prompt from another context in <a href="https://www.anthropic.com/claude">Claude</a> (though this also applies to ChatGPT and some other LLMs), I went back in my conversation history, copied the prompt, pasted it in a new chat and adjusted the context. But I recently discovered that <a href="https://www.anthropic.com/news/projects">Claude Projects</a> can be misused as &quot;prompt templates&quot;, which makes it way easier to handle repetitive tasks.</p>

<p>In Projects, you can set a system prompt that will be applied to all conversations in the project. I guess it&#39;s supposed to be used for relevant information about whatever you want to work on, but I like to think about a project more as a prompt template, rather than a project. For example, here&#39;s a project prompt that I use to brainstorm project ideas:</p>

<blockquote><p>Ask me one question at a time so we can develop a thorough, step-by-step spec for this idea. Each question should build on my previous answers, and our end goal is to have a detailed specification I can hand off to a developer. Letâ€™s do this iteratively and dig into every relevant detail. Remember, only one question at a time.</p></blockquote>

<p>(Stolen from <a href="https://harper.blog/2025/02/16/my-llm-codegen-workflow-atm/">this</a> great blog post)</p>

<p>While you could copy and paste this from a text file into every new conversation, Claude&#39;s projects make it super easy to save this as a template.</p>

<p>I guess this is an obvious feature for some people, but to me, it was a huge help once I found this out.</p>

<p>Got any other neat tricks for working with LLMs? I&#39;d love to hear them!</p>]]>
            </description>
        </item>
        <item>
            <title>
                Installing MSSQL Client Drivers for a PHP Application
            </title>
            <guid>
                https://garrit.xyz/posts/2024-09-24-installing-mssql-client-drivers-for-a-php-application
            </guid>
            <link>
                https://garrit.xyz/posts/2024-09-24-installing-mssql-client-drivers-for-a-php-application?utm_source=rss
            </link>
            <pubDate>
                Tue, 24 Sep 2024 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>I just had the pleasure (<em>cough</em>) to connect an <a href="https://de.wikipedia.org/wiki/Microsoft_SQL_Server">MSSQL</a> database to a <a href="https://laravel.com/">Laravel</a> application at work. Because the process was <em>super</em> tedious, I wanted to quickly jot this down so I will never have to go through this again.</p>

<h2>Our setup</h2>

<p>We&#39;re building a Laravel application with <a href="https://ddev.com/">DDEV</a>. DDEV essentially moves all development tools into Docker containers and adds some nice features like local database management.</p>

<h2>The process</h2>

<p>Laravel comes with the boilerplate to use MSSQL out of the box. In your app, just set the database config to use <code>sqlsrv</code>:</p>

<p><code>php
    &#39;connections&#39; =&gt; [
        &#39;sqlsrv&#39; =&gt; [
            &#39;driver&#39; =&gt; &#39;sqlsrv&#39;,
            &#39;url&#39; =&gt; env(&#39;DB_URL&#39;),
            &#39;host&#39; =&gt; env(&#39;DB_HOST&#39;, &#39;127.0.0.1&#39;),
            &#39;port&#39; =&gt; env(&#39;DB_PORT&#39;, &#39;1433&#39;),
            &#39;database&#39; =&gt; env(&#39;DB_DATABASE&#39;, &#39;laravel&#39;),
            &#39;username&#39; =&gt; env(&#39;DB_USERNAME&#39;, &#39;root&#39;),
            &#39;password&#39; =&gt; env(&#39;DB_PASSWORD&#39;, &#39;&#39;),
            &#39;unix_socket&#39; =&gt; env(&#39;DB_SOCKET&#39;, &#39;&#39;),
            &#39;charset&#39; =&gt; env(&#39;DB_CHARSET&#39;, &#39;utf8&#39;),
            &#39;prefix&#39; =&gt; &#39;&#39;,
            &#39;prefix_indexes&#39; =&gt; true,
            // &#39;encrypt&#39; =&gt; env(&#39;DB_ENCRYPT&#39;, &#39;yes&#39;),
            // &#39;trust_server_certificate&#39; =&gt; env(&#39;DB_TRUST_SERVER_CERTIFICATE&#39;, &#39;false&#39;),
        ],
    ],
</code></p>

<p>You will see errors when starting your app, because you need to install the corresponding drivers first. Instead of adding them through <a href="https://getcomposer.org/">Composer</a> (a widely adopted package manager for PHP), you have to install the ODBC drivers <strong>through the system package manager</strong>, because Microsoft doesn&#39;t maintain a PHP package. Furthermore, you also have to install the driver repository because <strong>Microsoft doesn&#39;t even maintain packages for the major Linux distributions</strong>. In our setup with DDEV, this has to be done by amending the Dockerfile used for the application container. Create a file at <code>.ddev/web-build/Dockerfile</code> and add the following contents:</p>

<p><code></code>`dockerfile</p>

<h1>https://ddev.readthedocs.io/en/stable/users/extend/customizing-images/#adding-extra-dockerfiles-for-webimage-and-dbimage</h1>

<h1>https://stackoverflow.com/questions/58086933/how-to-install-the-sql-server-php-drivers-in-ddev-local#new-answer</h1>

<p>ARG BASE<em>IMAGE
FROM $BASE</em>IMAGE</p>

<p>RUN npm install --global forever
RUN echo &quot;Built on $(date)&quot; &gt; /build-date.txt</p>

<h1>RUN curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -</h1>

<h1>RUN curl https://packages.microsoft.com/config/debian/11/prod.list &gt; /etc/apt/sources.list.d/mssql-release.list</h1>

<p>RUN curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor -o /usr/share/keyrings/microsoft-prod.gpg
RUN curl https://packages.microsoft.com/config/debian/12/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list</p>

<p>RUN apt-get update
RUN apt-get --allow-downgrades -y install libssl-dev
RUN apt-get -y update &amp;&amp; yes | ACCEPT<em>EULA=Y apt-get -y install php8.3-dev php-pear unixodbc-dev htop
RUN ACCEPT</em>EULA=Y apt-get -y install msodbcsql18 mssql-tools18
RUN sudo pecl channel-update pecl.php.net
RUN sudo pecl install sqlsrv
RUN sudo pecl install pdo_sqlsrv</p>

<p>RUN sudo printf &quot;; priority=20\nextension=sqlsrv.so\n&quot; &gt; /etc/php/8.3/mods-available/sqlsrv.ini
RUN sudo printf &quot;; priority=30\nextension=pdo<em>sqlsrv.so\n&quot; &gt; /etc/php/8.3/mods-available/pdo</em>sqlsrv.ini
RUN sudo phpenmod -v 8.3 -s cli sqlsrv pdo<em>sqlsrv
RUN sudo phpenmod -v 8.3 -s fpm sqlsrv pdo</em>sqlsrv
RUN sudo phpenmod -v 8.3 -s apache2 sqlsrv pdo_sqlsrv</p>

<p>RUN sudo printf &quot;; priority=20\nextension=sqlsrv.so\n&quot; &gt; /etc/php/8.3/mods-available/sqlsrv.ini
RUN sudo printf &quot;; priority=30\nextension=pdo<em>sqlsrv.so\n&quot; &gt; /etc/php/8.3/mods-available/pdo</em>sqlsrv.ini
RUN sudo phpenmod -v 8.3 -s cli sqlsrv pdo<em>sqlsrv
RUN sudo phpenmod -v 8.3 -s fpm sqlsrv pdo</em>sqlsrv
RUN sudo phpenmod -v 8.3 -s apache2 sqlsrv pdo_sqlsrv</p>

<p>RUN echo &#39;export PATH=&quot;$PATH:/opt/mssql-tools/bin&quot;&#39; &gt;&gt; ~/.bash_profile
<code></code>`</p>

<p>If you&#39;re reading this in the future and Microsoft may have released a new version of the ODBC drivers, you may have to follow the new <a href="https://learn.microsoft.com/de-de/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server?view=sql-server-ver16&amp;tabs=debian18-install%2Calpine17-install%2Cdebian8-install%2Credhat7-13-install%2Crhel7-offline#18">installation instructions from their documentation</a>. It took me a while to realize that I couldn&#39;t install version 17 of the driver because I was using the installation instructions for version 18. They are apparently incompatible with each other.</p>

<p>I hope that you&#39;ll never have to touch the shithole that is MSSQL, but if you do, I hope that this guide will be of value to you.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Testing SMTP connections
            </title>
            <guid>
                https://garrit.xyz/posts/2024-06-27-testing-smtp-connections
            </guid>
            <link>
                https://garrit.xyz/posts/2024-06-27-testing-smtp-connections?utm_source=rss
            </link>
            <pubDate>
                Thu, 27 Jun 2024 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>Just a quick note to my future self on how to test a SMTP connection with nothing but a tiny busybox container.</p>

<p>In my case specifically, I tested the connection from inside a Kubernetes cluster. Here&#39;s the quickest way to get a temporary pod up and running:</p>

<p><code>
kubectl run -n backend -i --tty --rm debug --image=busybox --restart=Never
</code></p>

<p>Busybox comes with telnet installed, which we can use to establish a connection to the server:</p>

<p><code>
/ # telnet smtp.mydomain.com 25
Connected to smtp.mydomain.com
220 mail.mydomain.com ESMTP Postfix (SMTP)
</code></p>

<p>Next, we can issue the SMTP commands through the open TCP connection to send a test mail. Lines beginning with a status code are server responses:</p>

<p><code></code>`
HELO smtp.mydomain.com
250 smtp.mydomain.com
MAIL FROM:<a href="mailto:noreply@mydomain.com">noreply@mydomain.com</a>                       <br/>250 2.1.0 Ok
RCPT TO:<a href="mailto:receiver@foo.com">receiver@foo.com</a>
250 2.1.5 Ok
DATA<br/>354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;
From: [noreply] <a href="mailto:noreply@mydomain.com">noreply@mydomain.com</a>
To: [Receiver] <a href="mailto:receiver@foo.com">receiver@foo.com</a>
Date: Thu, 27 Jun 2024 10:08:26 -0200
Subject: Test Message</p>

<p>This is a test message.</p>

<p>.
250 2.0.0 Ok: queued as 2478B7F135
<code></code>`</p>

<p>In case there&#39;s a firewall issue, you might not be able to establish a connection in the first place, or you won&#39;t get a reply to your TCP commands. In our case, everything worked fine.</p>

<p>I hope this is useful!</p>]]>
            </description>
        </item>
        <item>
            <title>
                Host your own LLM
            </title>
            <guid>
                https://garrit.xyz/posts/2024-06-17-host-your-own-llm
            </guid>
            <link>
                https://garrit.xyz/posts/2024-06-17-host-your-own-llm?utm_source=rss
            </link>
            <pubDate>
                Mon, 17 Jun 2024 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>I&#39;m currently dipping my toes into Large Language Models (LLMs, or &quot;AI&quot;) and what you can do with them. It&#39;s a fascinating topic, so expect some more posts on this in the coming days and weeks.</p>

<p>For starters, I wanted to document how I got my first LLM running on my local machine (a 2022 MacBook Pro). <a href="https://ollama.com/">Ollama</a> makes this process super easy. You just install it (<code>brew install ollama</code> in my case) and then run the model:</p>

<p><code>
ollama run llama3
</code></p>

<p>This will download the model and open a prompt, so you can start chatting right away!</p>

<p>You can think of Ollama as the <a href="https://www.docker.com/">Docker</a> CLI but for LLMs. There&#39;s a <a href="https://ollama.com/library">directory of LLMs</a>, and if a model has multiple different sizes, you can use it like you would pull a different docker tag:</p>

<p><code>
ollama pull llama3:8b
ollama pull llama3:70b
</code></p>

<p>The best thing about ollama is that it also exposes a web server for you to integrate the LLM into your application. As an example, here&#39;s how you would curl your local LLM:</p>

<p><code>
curl http://localhost:11434/api/chat -d &#39;{
    &quot;model&quot;: &quot;llama3&quot;,      
    &quot;messages&quot;: [{ &quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Are you a robot?&quot; }],
    &quot;stream&quot;: false
}&#39;
{&quot;model&quot;:&quot;llama3&quot;,&quot;created_at&quot;:&quot;2024-06-17T11:19:23.510588Z&quot;,&quot;message&quot;:{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;I am not a human, but I&#39;m also not a traditional robot. I&#39;m an artificial intelligence language model designed to simulate conversation and answer questions to the best of my ability. My \&quot;brain\&quot; is a complex algorithm that processes natural language inputs and generates responses based on patterns and associations learned from large datasets.\n\nWhile I don&#39;t have a physical body or consciousness like humans do, I&#39;m designed to interact with humans in a way that feels natural and conversational. I can understand and respond to questions, make suggestions, and even tell jokes (though my humor may be a bit... algorithmic).\n\nSo, while I&#39;m not a human or a traditional robot, I exist at the intersection of technology and language, designed to assist and communicate with humans in a helpful way!&quot;},&quot;done_reason&quot;:&quot;stop&quot;,&quot;done&quot;:true,&quot;total_duration&quot;:12565842250,&quot;load_duration&quot;:7059262291,&quot;prompt_eval_count&quot;:15,&quot;prompt_eval_duration&quot;:331275000,&quot;eval_count&quot;:156,&quot;eval_duration&quot;:5172858000}
</code></p>

<p>If your local machine is not beefy enough and you want to try out a large LLM on a rented server (AWS has <code>g5.2xlarge</code>, which gave me good results for <code>mixtral 8x7b</code>), you also have to set <code>OLLAMA_HOST=0.0.0.0</code> in your environment variables to be able to reach the remote server. <strong>This exposes the LLM to the public internet, so be careful when chosing your deployment strategy.</strong></p>

<p>And there you go! You just deployed your very own LLM. Pretty cool, huh?</p>]]>
            </description>
        </item>
        <item>
            <title>
                I just cleaned up 40 GB of Brew caches
            </title>
            <guid>
                https://garrit.xyz/posts/2024-06-03-i-just-cleaned-up-40-gb-of-brew-caches
            </guid>
            <link>
                https://garrit.xyz/posts/2024-06-03-i-just-cleaned-up-40-gb-of-brew-caches?utm_source=rss
            </link>
            <pubDate>
                Mon, 03 Jun 2024 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<blockquote><p><strong>EDIT</strong>: This trick will probably not be as effective on your system as it was on my system. After writing this post I realized that I had the <code>HOMEBREW_NO_INSTALL_CLEANUP=1</code> flag enabled on my system.</p></blockquote>

<p>My system (MacOS) is getting more cluttered the more I use it. I&#39;m sure you can relate. If you&#39;re using <a href="https://brew.sh/">Brew</a> as your package manager (which you should ðŸ˜‰), you might want to consider running the following command:</p>

<p><code>
brew cleanup -s
</code></p>

<p>For some reason this failed after some time with a &quot;directory not found&quot; error, but you can just run it again and it will continue cleaning up old caches. Once it was done, this freed up <strong>40 GB of disk space</strong> on my system. It might make sense to run this as a cronjob? Either way, I just wanted to jot this down before I enevitably forget this, as usual.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Beware of base64 encoded strings
            </title>
            <guid>
                https://garrit.xyz/posts/2024-04-15-beware-of-base64-encoded-strings
            </guid>
            <link>
                https://garrit.xyz/posts/2024-04-15-beware-of-base64-encoded-strings?utm_source=rss
            </link>
            <pubDate>
                Mon, 15 Apr 2024 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>I just encountered a fun little bug that I thought is worth sharing.</p>

<p><strong>TL;DR</strong>: the base64 util breaks lines after a certain number of columns. Use a <a href="https://www.man7.org/linux/man-pages/man1/base64.1.html">flag</a> to specify &quot;don&#39;t break&quot;. Here&#39;s the commit that fixes the issue:</p>

<p>&lt;img width=&quot;1588&quot; alt=&quot;image (3)&quot; src=&quot;https://github.com/garritfra/garrit.xyz/assets/32395585/dba76692-c89f-44da-b70a-f6732a406d75&quot;&gt;</p>

<p>It started when we noticed that a cronjob that used wget to regularly call an endpoint failed on one specific environment. The endpoint uses <a href="https://en.wikipedia.org/wiki/Basic_access_authentication">Basic Auth</a>, which is essentially a header with a <a href="https://en.wikipedia.org/wiki/Base64">Base64</a> encoded representation of a username and password. <a href="https://curl.se/">Curl</a> has this functionality <a href="https://curl.se/docs/manpage.html#-u">built in</a>, but to keep the attack surface as small as possible, we decided to stick to <a href="https://www.gnu.org/software/wget/">wget</a>, which is part of busybox, to keep the container image size under 1 MB (!). After all, all we want to do is ping an endpoint.</p>

<p>This is the command we used up to this point:</p>

<p><code>
wget --post-data=&quot;&quot; -O - --header=&quot;Authorization: Basic $(echo -n $BASIC_AUTH_USERNAME:$BASIC_AUTH_PASSWORD | base64)&quot; http://endpoint:8080/v1/cache
</code></p>

<p>We noticed that the request worked fine on non-prod environments, but it failed on production with the following error:</p>

<p><code>
The HTTP header line [b2verlk1rwjsnutbcapkjh==] does not conform to RFC 7230. The request has been rejected.
</code></p>

<p>After digging around for a while and separating out the individual pieces of the commands, I noticed that the subcommand to build the header value (<code>echo -n $BASIC_AUTH_USERNAME:$BASIC_AUTH_PASSWORD | base64</code>) behaved differently on prod vs. non-prod. The password on prod is way longer compared to the other environments. Let&#39;s run this command with a short input:</p>

<p><code>sh
/ $ echo -n someuser:somepassword | base64
c29tZXVzZXI6c29tZXBhc3N3b3Jk
/ $
</code></p>

<p>And again with a long input:</p>

<p><code>sh
/ $ echo -n someuser:somepasswordthatswaylongerthanthefirstonebutalsoverysecureandsafe | base64
c29tZXVzZXI6c29tZXBhc3N3b3JkdGhhdHN3YXlsb25nZXJ0aGFudGhlZmlyc3RvbmVidXRhbHNv
dmVyeXNlY3VyZWFuZHNhZmU=
/ $
</code></p>

<p>Bingo! There&#39;s a rogue newline character in the output of <code>base64</code>. The fix is very straight-forward. Using the <code>-w0</code> <a href="https://www.man7.org/linux/man-pages/man1/base64.1.html">flag for base64</a>, we can force the output to be on the same line:</p>

<p><code>
/ $ echo -n someuser:somepasswordthatswaylongerthanthefirstonebutalsoverysecureandsafe | base64 -w0
c29tZXVzZXI6c29tZXBhc3N3b3JkdGhhdHN3YXlsb25nZXJ0aGFudGhlZmlyc3RvbmVidXRhbHNvdmVyeXNlY3VyZWFuZHNhZmU=
</code></p>

<p>This eventually fixed the issue. Not something I would&#39;ve ever thought of!</p>]]>
            </description>
        </item>
        <item>
            <title>
                A simple search bar
            </title>
            <guid>
                https://garrit.xyz/posts/2024-04-11-a-simple-search-bar
            </guid>
            <link>
                https://garrit.xyz/posts/2024-04-11-a-simple-search-bar?utm_source=rss
            </link>
            <pubDate>
                Thu, 11 Apr 2024 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>I just added a simple search bar to my <a href="/links">&quot;More ...&quot;</a> page. It just redirects to a <a href="https://duckduckgo.com">DuckDuckGo</a> search with your search term and limits it to my site. Simple, yet effective!</p>

<p>The inspiration for this feature came from <a href="https://smeso.it/">Salvatore Mesoraca</a>&#39;s site. Here&#39;s the snippet, feel free to steal it:</p>

<p><code>jsx
&lt;form className=&quot;search&quot; method=&quot;get&quot; action=&quot;https://duckduckgo.com/&quot; target=&quot;_blank&quot;&gt;
    &lt;input id=&quot;search&quot; type=&quot;search&quot; name=&quot;q&quot; placeholder=&quot;Search via DDG&quot; /&gt;
    &lt;input type=&quot;hidden&quot; name=&quot;sites&quot; value=&quot;garrit.xyz&quot; /&gt;
    &lt;input type=&quot;submit&quot; value=&quot;Search&quot; /&gt;
&lt;/form&gt;
</code></p>

<h2>Try it out</h2>

<p>Try searching for anything!</p>

<p>&lt;form className=&quot;search&quot; method=&quot;get&quot; action=&quot;https://duckduckgo.com/&quot; target=&quot;_blank&quot;&gt;
    &lt;input id=&quot;search&quot; type=&quot;search&quot; name=&quot;q&quot; placeholder=&quot;Search via DDG&quot; /&gt;
    &lt;input type=&quot;hidden&quot; name=&quot;sites&quot; value=&quot;garrit.xyz&quot; /&gt;
    &lt;input type=&quot;submit&quot; value=&quot;Search&quot; /&gt;
&lt;/form&gt;</p>]]>
            </description>
        </item>
        <item>
            <title>
                Pandoc: Convert links to footnotes (the easy way)
            </title>
            <guid>
                https://garrit.xyz/posts/2024-04-04-pandoc-convert-links-to-footnotes-the-easy-way
            </guid>
            <link>
                https://garrit.xyz/posts/2024-04-04-pandoc-convert-links-to-footnotes-the-easy-way?utm_source=rss
            </link>
            <pubDate>
                Thu, 04 Apr 2024 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>Pandoc has <a href="https://pandoc.org/MANUAL.html#links">a feature</a> to covert links to footnotes. Unfortunately, this only applies to LaTeX documents. Since I want to stay away from LaTeX for reasons of bloat, I was looking for a more universal approach.</p>

<p>First, I encountered <a href="https://stackoverflow.com/questions/33900067/pandoc-filter-to-add-footnotes-to-links">this</a> thread suggesting to use a regular <a href="https://pandoc.org/filters.html">Pandoc filter</a>. This has one downside though: you need a Haskell toolchain on your system. So I moved on ... </p>

<p>I eventually stumbled across <a href="https://github.com/jgm/pandoc/discussions/9415">this</a> thread, explaining how to do the same thing but with a Lua filter instead of Haskell. Since Lua is embedded into Pandoc, you don&#39;t need to install anything. Hooray for embeddable languages!</p>

<p>Simply place the following snippet into file (<code>/filters/link-to-footnote.lua</code> for example):</p>

<p><code>lua
function Link(link)
    link.content:insert(pandoc.Note(link.target))
    return link.content
end
</code></p>

<blockquote><p><em>Note</em>: If you want to keep the original hyperlink in tact, replace the <code>return link.content</code> with <code>return link</code>.</p></blockquote>

<p>And add the following flag to your Pandoc build command:</p>

<p><code></code>`sh</p>

<h1>!/bin/sh</h1>

<p>pandoc text.md
    -o book.epub \
    --lua-filter=filters/link-to-footnote.lua \ # &lt;-- This one
    --metadata-file metadata.yaml \
    --standalone \
    # ...
<code></code>`</p>

<p>After compiling the document, you should now see that each link has a footnote with the link text.</p>]]>
            </description>
        </item>
        <item>
            <title>
                A better publishing workflow for static blogs
            </title>
            <guid>
                https://garrit.xyz/posts/2024-01-06-a-better-publishing-workflow-for-static-blogs
            </guid>
            <link>
                https://garrit.xyz/posts/2024-01-06-a-better-publishing-workflow-for-static-blogs?utm_source=rss
            </link>
            <pubDate>
                Sat, 06 Jan 2024 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>In my <a href="/posts/2023-12-23-100daystooffload-i-made-it">post</a> celebrating the completion of my <code>#100DaysToOffload</code> challenge, I teased that &quot;I built myself a handy script that turns the contents of a GitHub issue into a pull request, ready to be merged as a blog post&quot;. I didn&#39;t believe this was such a big deal, but a couple of readers actually reached out to me to ask about this.</p>

<p>First, some background. My site is built using a static site generator (not that it matters, but I use <a href="https://nextjs.org/">Next.js</a>). The beauty of using a SSG is that every blog post is literally just a markdown file in <a href="https://github.com/garritfra/garrit.xyz/tree/main/content/posts">a directory</a>. </p>

<h2>The story so far</h2>

<p>Before coming up with an automation, I had to</p>

<ol><li>Copy an older post to a new file</li><li>Rename the file</li><li>Fix the metadata/frontmatter</li><li>Delete the contents of the post</li><li><strong>Write the actual post</strong></li><li>Commit the file</li></ol>

<p>Putting out content on my blog involved quite a bit of friction. I felt like there was a barrier between my thoughts and the blog.</p>

<h2>The solution</h2>

<p>I&#39;ve been looking into how I could solve this issue for quite some time. I even had thoughts to build a custom blogging backend that would commit files to the <a href="https://github.com/garritfra/garrit.xyz">repository</a>, which is of course quite silly.</p>

<p>But then it struck me: GitHub issues fully support markdown! The idea was born:</p>

<ol><li>Open an issue in the repository of this blog</li><li>Write the post</li><li>Kick off an automation that takes the content of the issue and dumps it in a new file</li><li>Create a pull request to generate a preview of the post</li><li>Merge the PR once I&#39;m done reviewing the post</li></ol>

<h2>So, how does the automation work?</h2>

<p>The magic lies in <a href="https://github.com/garritfra/garrit.xyz/blob/main/.github/workflows/publish_via_issue.yaml">this GitHub Action</a>. It is kicked off whenever the <code>action:publish</code> label is added to an issue.</p>

<p>If for some reason this link will not be there anymore in the future, this is the action as of the time of writing:</p>

<p>&lt;details&gt;
&lt;summary&gt;Expand me!&lt;/summary&gt;</p>

<p><code></code>`yaml
on:
  issues:
    types: [labeled]</p>

<p>name: Publish issue as post
jobs:
  publish-issue:
    if: github.event.label.name == &#39;action:publish&#39;
    runs-on: ubuntu-latest
    env:
      POST<em>BODY: &#39;${{ github.event.issue.body }}&#39;
    steps:
      - uses: actions/checkout@v4
      - name: Create commits
        run: |
          export POST</em>DATE=$(date +&quot;%Y-%m-%d&quot;)
          export POST<em>TITLE=&quot;${{ github.event.issue.title }}&quot;
          export POST</em>TAGS=$(echo &quot;${{ join(github.event.issue.labels.<em>.name, &#39;, &#39;) }}&quot; | grep -o &#39;tag:[^,]</em>&#39; | cut -d: -f2- | paste -sd &quot; &quot; - | sed &#39;s/ /, /g&#39;)
          export FILE<em>TITLE=$(printf &quot;$POST</em>TITLE&quot; | tr -cs &#39;[:alnum:]&#39; &#39;-&#39; | tr &#39;A-Z&#39; &#39;a-z&#39; | sed &#39;s/--/-/g&#39; | sed &#39;s/^-\|-$//g&#39;)
          export FILE<em>NAME=&quot;$POST</em>DATE-$FILE<em>TITLE.md&quot;
          export FULL</em>PATH=&quot;content/posts/$FILE_NAME&quot;
          git config user.name &#39;Publish Bot&#39;
          git config user.email &#39;publish-bot@github.com&#39;</p>

<pre><code>      cat &lt;&lt; EOF &gt; $FULL_PATH
      ---
      title: &quot;$POST_TITLE&quot;
      date: &quot;$POST_DATE&quot;
      tags: &quot;$POST_TAGS&quot;
      ---

      EOF

      echo &quot;$POST_BODY&quot; &gt;&gt; $FULL_PATH

      git add $FULL_PATH
      git commit -m &quot;Publish $POST_TITLE&quot;

  - name: Create Pull Request
    uses: peter-evans/create-pull-request@v5
    with:
      title: &quot;New Post: ${{ github.event.issue.title }}&quot;
      body: &quot;Closes #${{ github.event.issue.number }}.\n\n This PR has been generated automatically.&quot;
  - uses: actions-ecosystem/action-remove-labels@v1
    with:
      labels: action:publish</code></pre>

<p><code></code>`</p>

<p>&lt;/details&gt;</p>

<p>So, when I&#39;m done writing the post, I simply label the issue as <code>action:publish</code>, and the action turns it into a new file, commits it and ultimately opens a PR for me to review. You can see this in action by looking at <a href="https://github.com/garritfra/garrit.xyz/issues/432">the issue for this post</a>. The action also handles tags for blog posts. You can see that there are a bunch of labels on the issues that correspond to the tags of this post.</p>

<p>One additional benefit of using a static site generator is that I can generate a preview site for each pull request. So, once I&#39;m done writing and the pull request is generated, I can just wait for Netlify to build the preview to read the blog post as if it is published to the site! This is very helpful for spotting typos or formatting issues, especially if I&#39;m writing a post on my phone.</p>

<h2>Further improvements</h2>

<p>There are two things the current setup is lacking:</p>

<p>Firstly, GitHub doesn&#39;t really highlight typos when writing an issue. I&#39;m sure there are ways to address this post-publish, I just didn&#39;t get around to doing that yet.</p>

<p>Secondly, there&#39;s no sustainable way to add images to the repository this way. I have an <a href="https://github.com/garritfra/garrit.xyz/tree/main/public/assets">assets directory</a> where I put all my images for blog posts. You can paste images directly into the issue, which is really handy, but that generates a permalink on a GitHub CDN, somewhere that I don&#39;t control. For the future, it would be nice to teach the GH action to take these images and dump them into the asset directory.</p>

<h2>Conclusion</h2>

<p>Using this workflow, I can pump out ideas whenever and whereever I feel like it. It drastically reduced the time from idea to written article, which helps me organize my thoughts a lot better. I also frequently create drafts for things I want to write about but is not fully fleshed out yet.</p>]]>
            </description>
        </item>
    </channel>
</rss>