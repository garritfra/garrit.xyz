<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>
            garrit.xyz
        </title>
        <link>
            https://garrit.xyz
        </link>
        <description>
            Garrit Franke
        </description>
        <language>
            en
        </language>
        <lastBuildDate>
            Wed, 11 Jun 2025 00:00:00 +0000
        </lastBuildDate>
        <item>
            <title>
                git diff --ignore-all-space makes code review way easier
            </title>
            <guid>
                https://garrit.xyz/posts/2025-06-11-git-diff-ignore-all-space-makes-code-reviews-way-easier
            </guid>
            <link>
                https://garrit.xyz/posts/2025-06-11-git-diff-ignore-all-space-makes-code-reviews-way-easier?utm_source=rss
            </link>
            <pubDate>
                Wed, 11 Jun 2025 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>I just learned a cool trick that I want to share. Let&#39;s review the diff of a file using <code>git diff</code>. I redacted most of it, but you probably found yourself in the situation of extremely long changes before:</p>

<p><code></code>`
diff --git a/lib/ui/screens/detail/components/body/event<em>body.dart b/lib/ui/screens/detail/components/body/event</em>body.dart
index d19d70a..1a61380 100644
--- a/lib/ui/screens/detail/components/body/event<em>body.dart
+++ b/lib/ui/screens/detail/components/body/event</em>body.dart
@@ -3,6 +3,7 @@
 class EventBody extends StatelessWidget {
   final EventDetails details;
@@ -18,35 +19,43 @@ class EventBody extends StatelessWidget {</p>

<p>   @override
   Widget build(BuildContext context) =&gt; Column(
-        crossAxisAlignment: CrossAxisAlignment.stretch,
-        children: [
-          EventInfoView(
-            location: details.location,
-            start: details.start,
-            end: details.end,
-            certified: details.certified,
-            paid: details.paid,
-            points: null, // Already shown in app bar
+    crossAxisAlignment: CrossAxisAlignment.stretch,
+    children: [
+      EventInfoView(
+        location: details.location,
+        start: details.start,
+        end: details.end,
+        certified: details.certified,
+        paid: details.paid,
+        points: null, // Already shown in app bar
+      ),
+      const SizedBox(height: 24),
+      Html(
+        data: details.description,
+        style: {
+          &#39;body&#39;: Style(
+            margin: Margins.zero,
...
 }
<code></code>`</p>

<p>But do you spot what has ACTUALLY been changed? In a real world scenario, it probably took you a while before you realised that it&#39;s the result of formatting the entire file. Nobody cares about whitespace when reviewing code. Or rather, your brain should not take the burden of having to care about that. That&#39;s what linters are for!</p>

<p>Let&#39;s look at the same diff with the <code>--ignore-all-space</code> (shorthand <code>-w</code>) flag activated:</p>

<p><code>
diff --git a/lib/ui/screens/detail/components/body/event_body.dart b/lib/ui/screens/detail/components/body/event_body.dart
index d19d70a..1a61380 100644
--- a/lib/ui/screens/detail/components/body/event_body.dart
+++ b/lib/ui/screens/detail/components/body/event_body.dart
@@ -3,6 +3,7 @@
 class EventBody extends StatelessWidget {
   final EventDetails details;
@@ -29,6 +30,14 @@ class EventBody extends StatelessWidget {
         points: null, // Already shown in app bar
       ),
       const SizedBox(height: 24),
+      Html(
+        data: details.description,
+        style: {
+          &#39;body&#39;: Style(
+            margin: Margins.zero,
+          ),
+        },
+      ),
       Text(details.description, style: context.theme.textTheme.body2Regular),
       if (details.registrationUrl != null || details.programUrl != null) const SizedBox(height: 16),
       if (details.registrationUrl != null) ...[
</code></p>

<p>Huh, so it&#39;s NOT just a formatted file. All whitespace changes have been stripped out, and you only see the changes that are relevant for the review. Neat!</p>

<p>Many tools also support ignoring whitespace. GitLab let&#39;s you disable <code>Show whitespace changes</code> in the merge request diff viewer. VSCode has the <code>diffEditor.ignoreTrimWhitespace</code> setting. So, if you want to make this the default in your tools, chances are there&#39;s an option for only showing relevant changes.</p>

<p>A bit of a sloppy post, but I hope this is useful to someone. Happy code reviewing!</p>]]>
            </description>
        </item>
        <item>
            <title>
                Tracking SQLite Database Changes in Git
            </title>
            <guid>
                https://garrit.xyz/posts/2023-11-01-tracking-sqlite-database-changes-in-git
            </guid>
            <link>
                https://garrit.xyz/posts/2023-11-01-tracking-sqlite-database-changes-in-git?utm_source=rss
            </link>
            <pubDate>
                Wed, 01 Nov 2023 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<blockquote><p><strong>Note</strong>: This post stirred up some interesting discussions on <a href="https://news.ycombinator.com/item?id=38110286">HackerNews</a> and <a href="https://lobste.rs/s/gnv9ho/tracking_sqlite_database_changes_git">Lobste.rs</a>.</p></blockquote>

<p>SQLite stores data in binary. If you run <code>cat mydb.sqlite</code>, you&#39;ll see a bunch of gibberish that doesn&#39;t resemble structured data at all. If you want to track changes and updates to a database using Git, you won&#39;t be able to see full diffs by default. You&#39;ll see that the file has changed, but not what changed exactly:</p>

<p><code>diff
diff --git a/mydb.sqlite b/mydb.sqlite
index f412c72..8f49ea5 100644
Binary files a/mydb.sqlite and b/mydb.sqlite differ
</code></p>

<p>So, is there a way around that? Turns out: there is! Here&#39;s a diff between two states of the SQLite database of <a href="https://www.gnucash.org/index.phtml">GnuCash</a>, which I&#39;m currently trying out to manage my finances. I&#39;ll explain how I got this diff afterwards:</p>

<p><code>diff
diff --git a/garritfranke.gnucash b/garritfranke.gnucash
index f412c72..8f49ea5 100644
--- a/garritfranke.gnucash
+++ b/garritfranke.gnucash
@@ -100,18 +100,22 @@ INSERT INTO accounts VALUES(&#39;ca11987c1c804da4b47b70d0fda87f10&#39;,&#39;Strom&#39;,&#39;EXPENSE&#39;
 INSERT INTO accounts VALUES(&#39;b1674455d6ec495c8898bcfb65ef100c&#39;,&#39;Template Root&#39;,&#39;ROOT&#39;,NULL,0,0,NULL,&#39;&#39;,&#39;&#39;,0,0);
+INSERT INTO accounts VALUES(&#39;9d2959ea65fc4f29b02dbc593fa9598a&#39;,&#39;Ausgleichskonto-EUR&#39;,&#39;BANK&#39;,&#39;26cc1292cf3e4f9584c71e7b3ec28479&#39;,100,0,&#39;39e1c61538e24572abfcf0f3f72022ac&#39;,&#39;&#39;,&#39;&#39;,0,0);
 CREATE TABLE budgets(guid text(32) PRIMARY KEY NOT NULL, name text(2048) NOT NULL, description text(2048), num_periods integer NOT NULL);
 CREATE TABLE prices(guid text(32) PRIMARY KEY NOT NULL, commodity_guid text(32) NOT NULL, currency_guid text(32) NOT NULL, date text(19) NOT NULL, source text(2048), type text(2048), value_num bigint NOT NULL, value_denom bigint NOT NULL);
 CREATE TABLE transactions(guid text(32) PRIMARY KEY NOT NULL, currency_guid text(32) NOT NULL, num text(2048) NOT NULL, post_date text(19), enter_date text(19), description text(2048));
+INSERT INTO transactions VALUES(&#39;db9eff5ec00145f293c85391becbefa8&#39;,&#39;26cc1292cf3e4f9584c71e7b3ec28479&#39;,&#39;&#39;,&#39;2023-11-01 10:59:00&#39;,&#39;2023-11-01 11:36:23&#39;,&#39;TEST&#39;);
 INSERT INTO splits VALUES(&#39;e45aeb0ac0274c6483f8deb2e7ad3743&#39;,&#39;10cecb081ac24ab5a369c93f96d293da&#39;,&#39;d229160352064f8c80090e0a10a57d9c&#39;,&#39;&#39;,&#39;Rechnung&#39;,&#39;n&#39;,&#39;1970-01-01 00:00:00&#39;,0,100,0,100,NULL);
 INSERT INTO splits VALUES(&#39;bb9d2818bdc14be9bb916f3efd82e77d&#39;,&#39;10cecb081ac24ab5a369c93f96d293da&#39;,&#39;1d93d1e67aed4320bb228c16f4e28092&#39;,&#39;&#39;,&#39;Rechnung&#39;,&#39;n&#39;,&#39;1970-01-01 00:00:00&#39;,25000,100,25000,100,&#39;b94c643ddcda48bcb7fc58626452e825&#39;);
 INSERT INTO splits VALUES(&#39;62747f45556740fe836c9f2180fe70c9&#39;,&#39;10cecb081ac24ab5a369c93f96d293da&#39;,&#39;4d6616d8c6524ead86641559539caf50&#39;,&#39;&#39;,&#39;Rechnung&#39;,&#39;n&#39;,&#39;1970-01-01 00:00:00&#39;,-25000,100,-25000,100,NULL);
+INSERT INTO splits VALUES(&#39;029f58c4d85c497c8e06ad4e52090033&#39;,&#39;db9eff5ec00145f293c85391becbefa8&#39;,&#39;a0f46eb546e34555ab4d0d3cc32c320f&#39;,&#39;&#39;,&#39;&#39;,&#39;n&#39;,&#39;1970-01-01 00:00:00&#39;,-10000,100,-10000,100,NULL);
+INSERT INTO splits VALUES(&#39;433a48cfdd314c94a105b5db9e7839de&#39;,&#39;db9eff5ec00145f293c85391becbefa8&#39;,&#39;9d2959ea65fc4f29b02dbc593fa9598a&#39;,&#39;&#39;,&#39;&#39;,&#39;n&#39;,&#39;1970-01-01 00:00:00&#39;,10000,100,10000,100,NULL);
 CREATE TABLE slots(id integer PRIMARY KEY AUTOINCREMENT NOT NULL, obj_guid text(32) NOT NULL, name text(4096) NOT NULL, slot_type integer NOT NULL, int64_val bigint, string_val text(4096), 
 INSERT INTO slots VALUES(84,&#39;d9d25d75a993434597d988baa65670bb&#39;,&#39;job-rate&#39;,3,0,NULL,NULL,&#39;1970-01-01 00:00:00&#39;,NULL,250,1,NULL);
 INSERT INTO slots VALUES(85,&#39;38cde72240424e8b9e3ab5d4852c9cf0&#39;,&#39;job-rate&#39;,3,0,NULL,NULL,&#39;1970-01-01 00:00:00&#39;,NULL,100,1,NULL);
+INSERT INTO slots VALUES(88,&#39;db9eff5ec00145f293c85391becbefa8&#39;,&#39;date-posted&#39;,10,0,NULL,NULL,&#39;1970-01-01 00:00:00&#39;,NULL,0,1,&#39;20231101&#39;);
 CREATE TABLE recurrences(id integer PRIMARY KEY AUTOINCREMENT NOT NULL, obj_guid text(32) NOT NULL, recurrence_mult integer NOT NULL, recurrence_period_type text(2048) NOT NULL, recurrence_period_start text(8) NOT NULL, recurrence_weekend_adjust text(2048) NOT NULL);
 CREATE TABLE schedxactions(guid text(32) PRIMARY KEY NOT NULL, name text(2048), enabled integer NOT NULL, start_date text(8), end_date text(8), last_occur text(8), num_occur integer NOT NULL, rem_occur integer NOT NULL, auto_create integer NOT NULL, auto_notify integer NOT NULL, adv_creation integer NOT NULL, adv_notify integer NOT NULL, instance_count integer NOT NULL, template_act_guid text(32) NOT NULL);
 CREATE TABLE lots(guid text(32) PRIMARY KEY NOT NULL, account_guid text(32), is_closed integer NOT NULL);
@@ -234,7 +239,7 @@ INSERT INTO taxtable_entries VALUES(3,&#39;1d459b285fca4de3bb4659744dc0cec5&#39;,&#39;d22916
 INSERT INTO taxtable_entries VALUES(5,&#39;6def0d3a788d414b818ecdb29ba3dcd1&#39;,&#39;d229160352064f8c80090e0a10a57d9c&#39;,0,100000,2);
 CREATE TABLE vendors(guid text(32) PRIMARY KEY NOT NULL, name text(2048) NOT NULL, id text(2048) NOT NULL, notes text(2048) NOT NULL, currency text(32) NOT NULL, active integer NOT NULL, tax_override integer NOT NULL, addr_name text(1024), addr_addr1 text(1024), addr_addr2 text(1024), addr_addr3 text(1024), addr_addr4 text(1024), addr_phone text(128), addr_fax text(128), addr_email text(256), terms text(32), tax_inc text(2048), tax_table text(32));
 DELETE FROM sqlite_sequence;
-INSERT INTO sqlite_sequence VALUES(&#39;slots&#39;,87);
+INSERT INTO sqlite_sequence VALUES(&#39;slots&#39;,88);
 INSERT INTO sqlite_sequence VALUES(&#39;taxtable_entries&#39;,5);
 CREATE INDEX tx_post_date_index ON transactions(post_date);
 CREATE INDEX splits_tx_guid_index ON splits(tx_guid);
</code></p>

<p>First, add a diff type called &quot;sqlite3&quot; to your config. The simplest way is to just run these commands:</p>

<p><code>shell
git config diff.sqlite3.binary true
git config diff.sqlite3.textconv &quot;echo .dump | sqlite3&quot;
</code></p>

<p>Alternatively, you can add this snippet to your <code>~/.gitconfig</code> or <code>.git/config</code> in your repository:</p>

<p><code>gitconfig
[diff &quot;sqlite3&quot;]
        binary = true
        textconv = &quot;echo .dump | sqlite3&quot;
</code></p>

<p>Next, create a file called <code>.gitattributes</code> if it&#39;s not already present and add this line:</p>

<p><code>gitattributes
*.sqlite diff=sqlite3
</code></p>

<blockquote><p>Note that the filename (<code>*.sqlite</code>) may differ from your setup. In my case for example, it should match files with <code>*.gnucash</code>.</p></blockquote>

<p>And that&#39;s about it! The next time you run <code>git diff</code> or any other command that produces a diff on a sqlite file, you&#39;ll see a nicely formatted diff of the changes.</p>

<h3>Source</h3>

<p>https://stackoverflow.com/a/21789167</p>

<hr/>

<p>This is post 084 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Organizing multiple Git identities
            </title>
            <guid>
                https://garrit.xyz/posts/2023-10-13-organizing-multiple-git-identities
            </guid>
            <link>
                https://garrit.xyz/posts/2023-10-13-organizing-multiple-git-identities?utm_source=rss
            </link>
            <pubDate>
                Fri, 13 Oct 2023 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>Here&#39;s a quick tip on how to manage multiple Git identities (e.g. personal, work, client1, client2).</p>

<p>I organize my Git repos in three levels. My personal projects live in a <code>~/sources</code> directory. All my work projects live in <code>~/work</code>. This is the first level.</p>

<p>Level 2 is the client, e.g. <code>~/work/client1</code>. Naturally, level 3 is the project repository: <code>~/work/client1/foo-api</code>.</p>

<p>This is how my work directory is organized:</p>

<p><code>
/Users/garrit/work
├── client1
│   ├── foo-api
│   ├── foo-ios
│   └── foo-android
└── client2
    ├── bar-ios
    └── bar-middleware
</code></p>

<p>Now, say that <code>client2</code> demands that we commit with a different identity than our default work email. Besides that, you probably also have a personal email address for your own projects. How do you manage that?</p>

<h2>.gitconfig includes</h2>

<p>The global configuration file for Git is <code>~/.gitconfig</code>. If you&#39;ve ever set a parameter like <code>git config user.name &quot;Foo Bar&quot;</code>: this is where it ended up.</p>

<p>One awesome feature of the .gitconfig file is that you can <strong>conditionally include other config files</strong>, and this is what does the trick. Here&#39;s my <code>~/.gitconfig</code> file:</p>

<p><code></code>`ini
[user]
    name = Garrit Franke
    email = garrit@slashdev.space</p>

<p>[includeIf &quot;gitdir:~/work/&quot;]
    path = ~/.gitconfig-work</p>

<p>[includeIf &quot;gitdir:~/work/client2/&quot;]
    path = ~/.gitconfig-client2</p>

<p>[includeIf &quot;gitdir:~/sources/&quot;]
    path = ~/.gitconfig-personal</p>

<h1>...</h1>

<p><code></code>`</p>

<p>By default, my name and email are always set to my personal identity. I also store some other global settings here, but those are not relevant for this post. If the repository is located inside the <code>~/work</code> directory, a file named <code>~/.gitconfig-work</code> is included. This is just another gitconfig file. This is what that looks like in my case:</p>

<p><code></code>`ini
[user]
    name = Garrit Franke
    signingkey = 12345678
    email = garrit@work.de</p>

<p>[commit]
    gpgsign = true
<code></code>`</p>

<p>I hope you&#39;ll see where this is going. For every identity, you keep a separate gitconfig file and include it in the main <code>~/.gitconfig</code>. Crucially, this requires you to organize your repositories grouped by client.</p>

<p>This trick has simplified my project onboarding quite a bit. No more &quot;You forgot to update your Email Address&quot; requests from clients!</p>

<hr/>

<p>This is post 083 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Git's built-in lifesaver
            </title>
            <guid>
                https://garrit.xyz/posts/2021-03-13-git-builtin-lifesaver
            </guid>
            <link>
                https://garrit.xyz/posts/2021-03-13-git-builtin-lifesaver?utm_source=rss
            </link>
            <pubDate>
                Sat, 13 Mar 2021 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>Everyone was in this situation at some point. You wasted a days worth of work by accidentally deleting a branch. But, all hope is not lost! Git never forgets.</p>

<p>Every action, be it committing changes, deleting or switching branches, is noted down by Git. To see your latest actions, you can simply run <code>git reflog</code> (It&#39;s pronounced <code>ref-log</code> but <code>re-flog</code> sounds just as reasonable):</p>

<p><code>
5704fba HEAD@{45}: commit: docs: update changelog
b471457 HEAD@{46}: commit: chore: refactor binop checks in parse_expression
5f5c5d4 HEAD@{47}: commit: fix: struct imports
76db271 HEAD@{48}: commit: chore: fix clippy warning
ac3e11c HEAD@{49}: commit: fix: circular imports
0cbdc88 HEAD@{50}: am: lexer: handle &#39; or &quot; within the string properly
27699f9 HEAD@{51}: commit: docs: spec: add notation
</code></p>

<p>Commits in Git are just data that is not associated by anything. If you accidentally delete a branch, the commits will stay where they are, and you can reference them directly. To recreate your deleted branch, simply run this command:</p>

<p><code>
git checkout -b &lt;branch&gt; &lt;sha&gt;
</code></p>

<p>And that&#39;s it! Your branch is restored. Remember to commit early and often, or prepare to loose your work!</p>

<p>This is post 015 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                The Patch-Based Git Workflow
            </title>
            <guid>
                https://garrit.xyz/posts/patch-based-git-workflow
            </guid>
            <link>
                https://garrit.xyz/posts/patch-based-git-workflow?utm_source=rss
            </link>
            <pubDate>
                Mon, 28 Sep 2020 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>If you have ever contributed to an open source project, chances are you have opened a pull request on GitHub or a similar platform to present your code to the maintainers. While this is a very approachable way of getting your code reviewed, some projects have decided against using pull requests and instead accept patches via email.</p>

<h2>An introduction to patches</h2>

<p>A patch is essentially a git commit expressed in plain text. It describes what commit the change is based on, and what has changed. A basic patch looks like this:</p>

<p><code></code>`
From 92132241233033a123c4fa833449d6a0d550219c Mon Sep 17 00:00:00 2001
From: Bob <a href="mailto:bob@example.com">bob@example.com</a>
Date: Tue, 25 May 2009 15:42:16 +0200
Subject: [PATCH 1/2] first change</p>

<hr/>

<p> test.txt |    1 +-
 1 files changed, 1 insertions(+), 1 deletions(-)</p>

<p>diff --git a/test.txt b/test.txt
index 7634da4..270eb95 100644
--- a/test.txt
+++ b/test.txt
@@ -1 +1 @@
-Hallo Bob
+Hallo Alice!
<code></code>`</p>

<p>As you can see, it is very readable for both the reviewer and the machine.</p>

<h2>Sending and receiving patches</h2>

<p>The easiest way you can generate a patch from a commit is to use <code>git-format-patch</code>:</p>

<p><code>
git format-patch HEAD^
</code></p>

<p>This will generate a <code>.patch</code> file, that can be embedded into an email and sent to the maintainers. Oftentimes they will then reply to your mail with some inline comments about your code.</p>

<p>To simplify this process further, git has the <code>send-email</code> command, which let&#39;s you send the patch directly to someone without needing to embed it manually. I won&#39;t go into details about this, but there is a <a href="https://git-send-email.io/">well written guide</a> on how to set it up.</p>

<p>If you have received a patch from someone, you can apply it to your tree with the <code>am</code> (apply mail) command:</p>

<p><code>
git am &lt; 0001-first-change.patch
</code></p>

<p>check your <code>git log</code> to see the patch in form of the latest commit.</p>

<h2>Why even bother</h2>

<p>You might think that this is just a silly and outdated approach to collaborative development. &quot;Why not simply open a pull request?&quot; you might ask. Some projects, especially low-level oriented ones like the Linux kernel, do not want to rely on third-party platforms like GitHub to host their code, with good reasons:</p>

<ol><li>Everyone can participate! You don&#39;t need to register an account on some proprietary website to collaborate in a project that uses a patch-based workflow. You don&#39;t even have to expose your identity, if you don&#39;t want to. All you need is an email-address, and frankly most of us have one.</li><li>It&#39;s plain simple! Once you get used to generating and applying patches on the command line, it is in fact easier and faster than opening a pull request in some clunky GUI. It doesn&#39;t get simpler than plain text.</li><li>It is rewarding! Once you have submitted a patch to a project, there is no better feeling than getting a simple &quot;Applied, thanks!&quot; response from a maintainer. And if it&#39;s a response that contains feedback rather than an approval, it feels even better to submit that reworked code again and get it eventually applied.</li></ol>

<h2>Conclusion</h2>

<p>The patch-based workflow is an alternative way to collaborate with developers. If it helps you in your day to day business depends on the projects you are contributing to, but in the end it is always good to have many tools under your belt.</p>]]>
            </description>
        </item>
    </channel>
</rss>